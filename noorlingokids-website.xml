This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.svg
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.mjs
i18n.ts
messages/ar.json
messages/en.json
next-intl.config.js
next.config.ts
package.json
postcss.config.mjs
public/.htaccess
README.md
src/app/[locale]/about/BelowSection.tsx
src/app/[locale]/about/Hero.tsx
src/app/[locale]/about/MissionValues.tsx
src/app/[locale]/about/MobileSection.tsx
src/app/[locale]/about/page.tsx
src/app/[locale]/contact/ContactForm.tsx
src/app/[locale]/contact/Mobile.tsx
src/app/[locale]/contact/page.tsx
src/app/[locale]/globals.css
src/app/[locale]/layout.tsx
src/app/[locale]/page.tsx
src/app/[locale]/parentguide/page.tsx
src/components/Animations/AnimatedContent.tsx
src/components/Animations/AosInitializer.tsx
src/components/Animations/BlurText.tsx
src/components/Animations/SplitText.tsx
src/components/Footer/Footer.tsx
src/components/Home/About.tsx
src/components/Home/App.tsx
src/components/Home/Carousel.tsx
src/components/Home/Confidence.tsx
src/components/Home/Download.tsx
src/components/Home/Experience.tsx
src/components/Home/Founder.tsx
src/components/Home/Hero.tsx
src/components/Home/Screentime.tsx
src/components/Home/Whoweare.tsx
src/components/Navbar/LanguageSwitcher.tsx
src/components/Navbar/LanguageSwitcherMobile.tsx
src/components/Navbar/Navbar.tsx
src/components/text.txt
src/middleware.ts
src/types/aos.d.ts
src/types/react-slick.d.ts
src/types/tailwindcss-dir.d.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="i18n.ts">
import { getRequestConfig } from 'next-intl/server';

export default getRequestConfig(async ({ locale }) => {
  // Validate that the incoming `locale` parameter is valid
  const locales = ['en', 'ar'];
  const validLocale = locales.includes(locale!) ? locale! : 'en';

  return {
    locale: validLocale,
    messages: (await import(`./messages/${validLocale}.json`)).default
  };
});
</file>

<file path="messages/ar.json">
{
  "Navbar": {
    "home": "الرئيسية",
    "about": "من نحن",
    "contact": "اتصل بنا",
    "getStarted": "ابدأ الآن"
  },
  "Hero": {
    "title": "يساعد نورلينجو الأطفال الناطقين بالعربية على القراءة بثقة، والتفكير النقدي، والتواصل مع ثقافتهم من خلال قصص تمزج بين محو الأمية باللغة الإنجليزية والعلوم والرياضيات والتعلم الواقعي.",
    "subtitle": "صُمم نورلينجو خصيصًا لدولة الإمارات العربية المتحدة، ويستخدم نهجًا متكاملًا يعزز القراءة والقواعد والمفردات مع تقديم دروس أخلاقية ومعرفة أكاديمية من مختلف المواد، مما يثير الفضول والفخر الثقافي وحب التعلم مدى الحياة.",
    "downloadButton": "حمّل الآن",
    "coursesButton": "عرض دوراتنا"
  },
  "Footer": {
    "followUs": "تابعنا",
    "getAccess": "احصل على وصول مبكر أو نصائح للآباء",
    "enterEmail": "أدخل بريدك الإلكتروني",
    "submit": "إرسال",
    "tagline": "قراءة متجذرة في الثقافة. مصممة لصفوف دولة الإمارات والعقول الشابة.",
    "terms": "شروط الخدمة",
    "privacy": "سياسة الخصوصية",
    "parentGuide": "اقرأ دليل الوالدين",
    "copyright": "© 2025 نورلينجو. جميع الحقوق محفوظة."
  },
  "AboutHero": {
    "title": "عن نورلينجو",
    "subtitle": "نضيء الطريق إلى محو الأمية باللغة الإنجليزية للطلاب الناطقين بالعربية — من خلال القصص الثقافية والاستراتيجيات الذكية وتجارب التعلم الممتعة.",
    "watchStory": "شاهد قصتنا"
  },
  "ContactForm": {
    "title": "اتصل بنا",
    "subtitle": "تواصل مع فريقنا! أرسل لنا رسالة ؛)",
    "firstName": "الاسم الأول",
    "firstNamePlaceholder": "أدخل اسمك الأول",
    "lastName": "اسم العائلة",
    "lastNamePlaceholder": "أدخل اسم عائلتك",
    "email": "البريد الإلكتروني",
    "emailPlaceholder": "البريد الإلكتروني",
    "message": "الرسالة",
    "messagePlaceholder": "رسالتك",
    "maxChars": "200 حرف كحد أقصى.",
    "mandatory": "جميع الحقول إلزامية.",
    "send": "إرسال"
  },
  "AboutPage": {
    "founderTitle": "تريسي سوزان براونز – معلمة ومؤسسة",
    "founderText": "بعد أكثر من 8 سنوات من التدريس في الإمارات، أنشأت تريسي نورلينجو لمساعدة الأطفال على القراءة بفهم حقيقي — وليس فقط التعرف على الكلمات. كل درس يتشكل من خلال خبرتها في الفصل، ورؤيتها الثقافية، وشغفها بمساعدة الأطفال على النجاح.",
    "founderQuote": "لقد أنشأت نورلينجو لأدرس بالطريقة التي طالما أردت أن أدرس بها — بشكل هادف وثقافي وبفرح."
  },
  "MissionValues": {
    "missionTitle": "مهمتنا",
    "whyWeExistTitle": "لماذا نتواجد",
    "whyWeExistText": "يعاني العديد من الطلاب الناطقين بالعربية في الإمارات من صعوبة في اللغة الإنجليزية — ليس بسبب نقص القدرة، ولكن لأن الأدوات غالبًا ما تفوت أفضل طريقة لتعلمهم. نورلينجو يسد هذه الفجوة.",
    "coreValuesTitle": "قيمنا الأساسية",
    "coreValuesText": "القيم التي توجه مهمتنا لمساعدة كل طفل على القراءة بثقة، والتفكير النقدي، والبقاء على اتصال بثقافتهم. هذه المعتقدات توجه كل ما ننشئه — مساعدة الأطفال ليس فقط على القراءة، ولكن على الفهم والتعبير والازدهار.",
    "value1Title": "الفهم فوق الحفظ",
    "value1Text": "الفهم العميق — وليس مجرد التعرف على الكلمات. نركز على مساعدة الأطفال على فهم ما يقرؤونه حقًا — ربط الأفكار واستيعاب المعنى.",
    "value2Title": "الأهمية الثقافية",
    "value2Text": "تعكس قصصنا وشخصياتنا ثقافة الإمارات الفريدة ولغتها وتراثها — مما يساعد الأطفال على الشعور بالتمثيل والاحترام.",
    "value3Title": "التفكير النقدي",
    "value3Text": "نحن نستخدم استراتيجيات مثبتة مثل التنبؤ والتصور والتلخيص لتحويل القراءة إلى عملية نشطة وجذابة تعزز التركيز والتفكير الإبداعي في كل درس.",
    "value4Title": "التعلم الشامل",
    "value4Text": "نعتقد أن كل طفل — بغض النظر عن خلفيته أو مستواه التعليمي — يجب أن يحصل على قصص تعلم وتلهم وتعكس هويتهم."
  },
  "GetStarted": {
    "title": "هل أنت مستعد لبدء رحلة التعلم؟",
    "text": "قم بتنزيل تطبيق نورلينجو وساعد طفلك على القراءة بثقة وفضول وفخر ثقافي.",
    "downloadButton": "حمّل الآن",
    "madeWithLove": "صنع بحب لمساعدة كل طفل على القراءة بثقة!",
    "getStartedTitle": "ابدأ مع نورلينجو"
  },
  "Whoweare": {
    "title1": "من نحن",
    "p1_1": "نورلينجو هي منصة قراءة مقرها الإمارات تساعد الأطفال الناطقين بالعربية على إتقان اللغة الإنجليزية بثقة وتفكير نقدي وفخر ثقافي.",
    "p1_2": "متوافقة مع معايير المناهج في الإمارات، نمزج بين سرد القصص والتعلم القائم على المواد في العلوم والرياضيات والفهم الاجتماعي.",
    "p1_3": "نهجنا القائم على البحث والمتجذر ثقافيًا يتجاوز الحفظ، ويبني الفهم الحقيقي والشخصية وحب التعلم مدى الحياة.",
    "title2": "لماذا نفعل ذلك",
    "p2_1": "لقد أنشأنا نورلينجو لأن العديد من الأطفال الناطقين بالعربية الأذكياء يعانون من صعوبة في اللغة الإنجليزية — ليس بسبب نقص القدرة، ولكن بسبب نقص الأدوات المخصصة.",
    "p2_2": "يسد نورلينجو هذه الفجوة بقصص ذات صلة ثقافية وتعلم متكامل عبر المواد، مما يساعد كل طفل على القراءة والتفكير والازدهار.",
    "p2_3": "هدفنا ليس فقط تنشئة قراء أقوياء، ولكن أيضًا مفكرين واثقين ومتعلمين فخورين يساهمون في مستقبل الإمارات."
  },
  "AboutUsHome": {
    "title": "تعرف علينا",
    "text": "نورلينجو هو تطبيق قراءة باللغة الإنجليزية مقره الإمارات ومصمم خصيصًا للأطفال الناطقين بالعربية. من خلال سرد القصص الجذاب ومفردات العلوم والتكنولوجيا والهندسة والرياضيات والمحتوى الثقافي الغني، نساعد المتعلمين الصغار على القراءة بفهم حقيقي — وليس فقط التعرف على الكلمات. تعكس قصصنا تراث وقيم الإمارات، باستخدام أساليب مدعومة بالبحث لتعزيز الثقة والتركيز وحب التعلم. مدفوعًا بمهمة الفخر الثقافي والإنصاف التعليمي، يمكّن نورلينجو الأطفال في جميع أنحاء الإمارات ليصبحوا قراء ومفكرين نقديين مدى الحياة.",
    "learnMore": "اعرف المزيد"
  },
  "ScreentimeSection": {
    "title": "ما الذي يجعل نورلينجو خيارًا هادفًا لوقت الشاشة لطفلك؟",
    "card1Title": "قصص غنية ثقافيًا",
    "card1Desc": "يتفاعل الأطفال بشكل أعمق عندما تعكس القصص ثقافتهم. يبني نورلينجو المهارات اللغوية والهوية من خلال قصص متجذرة في قيم الإمارات.",
    "card2Title": "بيئة آمنة وخالية من الإعلانات",
    "card2Desc": "خالٍ من الإعلانات والمشتتات، يوفر نورلينجو مساحة مركزة وآمنة للتعلم الهادف.",
    "card3Title": "وقت شاشة هادف",
    "card3Desc": "مصمم للفهم والتفكير النقدي — وليس فقط التعرف على الكلمات — تدعم كل جلسة التعلم المتعمد والدائم.",
    "card4Title": "النمو العاطفي والأكاديمي",
    "card4Desc": "يبني الأطفال الثقة والفضول أثناء تطوير مهارات القراءة والتفكير التي تدعم النجاح مدى الحياة."
  },
  "Confidence": {
    "title": "نضيء طريق اللغة الإنجليزية من خلال قصص من الوطن",
    "banner1": "صنع بحب لمساعدة كل طفل على القراءة بثقة!",
    "banner2": "تمكين الطلاب في جميع أنحاء الإمارات من خلال فهم القراءة المدعوم بالبحث.",
    "card1Title": "وقت شاشة هادف",
    "card1Desc": "تمكين الطلاب في جميع أنحاء الإمارات من خلال فهم القراءة المدعوم بالبحث.",
    "card2Title": "نهج التعلم القائم على الألعاب",
    "card2Desc": "قصص متجذرة في هوية الإمارات وتقاليدها وقيمها لجعل القراءة ذات معنى.",
    "card3Title": "تحسين التركيز والتفكير",
    "card3Desc": "الاستراتيجيات التفاعلية مثل التنبؤ والتصور والتلخيص تجعل القراءة ممتعة وفعالة."
  },
  "AppSection": {
    "title": "جرب تطبيق نورلينجو",
    "card1Title": "إعداد بسيط وآمن",
    "card1Desc": "الإعداد سريع ويقوده ولي الأمر. يمكن للأوصياء فقط إنشاء وإدارة ملفات تعريف الأطفال — مما يضمن التحكم في الخصوصية.",
    "card2Title": "ملفات شخصية مخصصة",
    "card2Desc": "أضف عدة أطفال تحت حساب وصي واحد. يحصل كل طفل على مسار تعليمي مخصص بناءً على مستواه وعمره.",
    "card3Title": "تصميم تعليمي مدعوم بالبحث",
    "card3Desc": "يستخدم نورلينجو استراتيجيات مثل التنبؤ والتصور والتلخيص لتحسين الفهم — مما يجعل التعلم عميقًا وليس سطحيًا.",
    "card4Title": "واجهة مستخدم مستوحاة من الثقافة",
    "card4Desc": "من الشخصيات إلى الخلفيات، تحتفل كل التفاصيل بثقافة الإمارات — مما يجعل الأطفال يشعرون بأنهم مرئيون ومتصلون أثناء التعلم."
  },
  "FounderMessage": {
    "title": "رسالة من مؤسستنا",
    "greeting": "أعزائي أولياء الأمور،",
    "p1": "بعد تدريس اللغة الإنجليزية في فصول الإمارات لأكثر من 8 سنوات، رأيت تحديًا متكررًا — طلاب أذكياء وقادرون يعانون من صعوبة في فهم اللغة الإنجليزية، ليس لأنهم يفتقرون إلى الإمكانات، ولكن لأن معظم أدوات التعلم لم تُصنع من أجلهم. أسست نورلينجو لتغيير ذلك.",
    "p2": "معظم التطبيقات مصممة لجماهير عالمية وتعلم الأطفال كيفية نطق الكلمات — ولكن ليس كيفية فهمها. كان طلابنا بحاجة إلى أكثر من التعرف — كانوا بحاجة إلى الفهم والاتصال والسياق. وُلد نورلينجو لتلبية هذه الحاجة. نستخدم قصصًا ذات صلة ثقافية، ومفردات أكاديمية، واستراتيجيات قراءة مثل التنبؤ والتصور والتلخيص — مدعومة بالبحث ومصممة لكيفية تعلم الأطفال حقًا.",
    "p3": "في نورلينجو، نحن لا نساعد الأطفال على القراءة فقط. نحن نساعدهم على التفكير النقدي، والنمو في الثقة، والشعور بالفخر بمن هم.",
    "closing": "مع الحب والهدف",
    "founderName": "تريسي سوزان براونز",
    "founderTitle": "مؤسسة، نورلينجو"
  },
  "Carousel": {
    "title": "داخل تجربة التعلم",
    "slide1": "ترحب بالمستخدمين بهوية وشخصيات نورلينجو الدافئة.",
    "slide2": "شاشة بداية ثانوية مع رسوم متحركة خفية أو تأخير قبل التحميل.",
    "slide3": "تدعو أولياء الأمور لبدء رحلة تعلم أطفالهم.",
    "slide4": "تشرح كيف سيستكشف الأطفال القصص وكلمات من العالم الحقيقي.",
    "slide5": "تسلط الضوء على ألعاب مصغرة ممتعة وتفاعلية للقراءة بثقة.",
    "slide6": "تصف رؤى أولياء الأمور وتتبع معالم التعلم.",
    "slide7": "اختر التسجيل باستخدام جوجل أو البريد الإلكتروني للبدء.",
    "slide8": "يدخل ولي الأمر اسم الطفل والبريد الإلكتروني وكلمة المرور لإنشاء حساب.",
    "slide9": "تخصيص التجربة عن طريق سؤال فئة عمر الطفل.",
    "slide10": "تحديد مستوى اللغة الإنجليزية للطفل (مبتدئ إلى واثق).",
    "slide11": "لمسة شخصية أخيرة لتخصيص التجربة.",
    "slide12": "تسمح لأولياء الأمور بتسجيل الدخول مرة أخرى إلى حساب موجود."
  },
  "ParentGuide": {
    "title": "دليل أولياء الأمور في نورلينجو",
    "section1Title": "١. ما هو نورلينجو؟",
    "section1Text": "نورلينجو هو تطبيق لتعليم القراءة باللغة الإنجليزية متجذر ثقافيًا ومصمم للأطفال الناطقين بالعربية الذين تتراوح أعمارهم بين 5 و 13 عامًا. مهمتنا هي مساعدة الأطفال على أن يصبحوا قراء واثقين ومفكرين نقديين وفخورين بتراثهم أثناء بناء الطلاقة في اللغة الإنجليزية.",
    "section2Title": "٢. كيف يتعلم طفلي؟",
    "section2Text1": "يستخدم نورلينجو استراتيجيات القراءة CAFE لبناء أسس قوية لمحو الأمية:",
    "cafeC": "- الفهم: فهم الفكرة الرئيسية والتفاصيل الداعمة.",
    "cafeA": "- الدقة: قراءة الكلمات بشكل صحيح مع الانتباه إلى الإملاء والمعنى.",
    "cafeF": "- الطلاقة: القراءة بسلاسة مع التعبير والسرعة المناسبين.",
    "cafeE": "- توسيع المفردات: تعلم كلمات جديدة في سياق هادف.",
    "section2Text2": "على سبيل المثال، عند التنبؤ، يستخدم القراء أدلة النص والمعرفة الخلفية لعمل تخمينات منطقية حول القصة.",
    "section2Text3": "تدمج جميع الدروس اللغة الإنجليزية مع العلوم والرياضيات والتربية الأخلاقية. العناصر القائمة على الألعاب مثل الشارات وأشرطة التقدم تجعل القراءة ممتعة مع تعزيز المهارات الأكاديمية الرئيسية.",
    "section3Title": "٣. كيف تبدأ",
    "step1": "قم بتنزيل نورلينجو من متجر التطبيقات أو جوجل بلاي (قريبًا).",
    "step2": "أنشئ حساب ولي الأمر الخاص بك.",
    "step3": "أضف اسم طفلك وعمره وصفه لبناء ملفه الشخصي.",
    "step4": "حدد حدودًا زمنية وأهدافًا للقراءة في لوحة تحكم ولي الأمر.",
    "section4Title": "٤. ما الذي يجعل نورلينجو مختلفًا؟",
    "diff1": "تعكس القصص تراث وتقاليد الإمارات.",
    "diff2": "تبني الدروس الفهم، وليس فقط قراءة الكلمات.",
    "diff3": "مصمم لمتعلمي اللغة الثانية مع سرد كامل ودعم مرئي.",
    "diff4": "تم إنشاؤه بواسطة معلمي اللغة الإنجليزية وخبراء المناهج في الإمارات.",
    "section5Title": "٥. هل هو آمن؟",
    "safe1": "لا إعلانات، لا عمليات شراء داخل التطبيق، ولا تتم مشاركة البيانات مع أطراف ثالثة.",
    "safe2": "يتم مراجعة كل المحتوى من قبل معلمين وخبراء مناهج في الإمارات للتوافق مع المناهج الدراسية.",
    "safe3": "الملفات الشخصية آمنة ويتحكم فيها ولي الأمر فقط.",
    "section6Title": "٦. كيف يمكنني تتبع تقدم طفلي؟",
    "progress1": "استخدم لوحة تحكم ولي الأمر الخاصة بك لرؤية القصص المقروءة والوقت المستغرق في القراءة ودرجات الاختبارات.",
    "progress2": "ابحث عن علامات النمو مثل تحسين المفردات والفهم المحسن والثقة في القراءة.",
    "section7Title": "٧. الأسئلة الشائعة",
    "faq1q": "ما هي لغة التطبيق؟",
    "faq1a": "الإنجليزية (الدعم العربي قريبًا).",
    "faq2q": "هل يمكن لطفلي استخدامه إذا لم يكن يستطيع القراءة بعد؟",
    "faq2a": "نعم! كل المحتوى مروي.",
    "faq3q": "هل يمكنني إضافة أكثر من طفل واحد؟",
    "faq3a": "نعم، يتم دعم ملفات شخصية متعددة.",
    "faq4q": "هل سيحل هذا محل القراءة المدرسية؟",
    "faq4a": "لا، إنه مكمل رائع للعمل المدرسي.",
    "section8Title": "٨. الدعم ومعلومات الاتصال",
    "supportText": "نحن هنا للمساعدة! للأسئلة أو الملاحظات أو المشكلات الفنية:",
    "emailLabel": "البريد الإلكتروني:",
    "phoneLabel": "الهاتف / واتساب:"
  }
}
</file>

<file path="messages/en.json">
{
  "Navbar": {
    "home": "Home",
    "about": "About Us",
    "contact": "Contact Us",
    "getStarted": "Get Started"
  },
  "Hero": {
    "title": "NoorLingo helps Arabic-speaking children read with confidence, think critically, and connect to their culture through stories that blend English literacy with science, math, and real-world learning.",
    "subtitle": "Built for the UAE, NoorLingo uses an integrated approach that strengthens reading, grammar, and vocabulary while introducing moral lessons and academic knowledge from across subjects, igniting curiosity, cultural pride, and a lifelong love of learning.",
    "downloadButton": "Download Now",
    "coursesButton": "View Our Courses"
  },
  "Footer": {
    "followUs": "Follow Us",
    "getAccess": "Get early access or parent tips",
    "enterEmail": "Enter your email",
    "submit": "Submit",
    "tagline": "Culturally rooted reading. Built for UAE classrooms and young minds.",
    "terms": "Terms of Services",
    "privacy": "Privacy Policy",
    "parentGuide": "Read Parent Guide",
    "copyright": "© 2025 NoorLingo. All rights reserved."
  },
  "AboutHero": {
    "title": "About Noorlingo",
    "subtitle": "Lighting the path to English literacy for Arabic-speaking students—through cultural stories, smart strategies, and joyful learning experiences.",
    "watchStory": "Watch Our Story"
  },
  "ContactForm": {
    "title": "Contact us",
    "subtitle": "Connect with our team! Drop us a line ;)",
    "firstName": "First Name",
    "firstNamePlaceholder": "Enter your first name",
    "lastName": "Last Name",
    "lastNamePlaceholder": "Enter your last name",
    "email": "Email Address",
    "emailPlaceholder": "Email",
    "message": "Message",
    "messagePlaceholder": "Your message",
    "maxChars": "200 characters max.",
    "mandatory": "All fields are mandatory.",
    "send": "Send"
  },
  "AboutPage": {
    "founderTitle": "Tracey Susan Brauns – Educator & Founder",
    "founderText": "After 8+ years of teaching in the UAE, Tracey built NoorLingo to help children read with true understanding—not just recognize words. Every lesson is shaped by her classroom experience, cultural insight, and passion for helping kids succeed.",
    "founderQuote": "“I created NoorLingo to teach how I always wanted to teach— meaningfully, culturally, and with joy.”"
  },
  "MissionValues": {
    "missionTitle": "Our Mission",
    "whyWeExistTitle": "Why We Exist",
    "whyWeExistText": "Many Arabic-speaking students in the UAE struggle with English—not because of lack of ability, but because tools often miss how they learn best. NoorLingo bridges that gap.",
    "coreValuesTitle": "Core Values",
    "coreValuesText": "The values that guide our mission to help every child read with confidence, think critically, and stay connected to their culture. These beliefs guide everything we create—helping children not only read, but understand, express, and thrive.",
    "value1Title": "Comprehension Over Memorization",
    "value1Text": "Deep understanding—not just word recognition.We focus on helping children truly understand what they read—connecting ideas & grasping meaning.",
    "value2Title": "Cultural Relevance",
    "value2Text": "Our stories and characters reflect the UAE’s unique culture, language, and heritage—helping children feel represented & respected. ",
    "value3Title": "Critical Thinking",
    "value3Text": "We use proven strategies like predicting, visualizing, and summarizing to turn reading into an active, engaging process focus, and creative thinking in every lesson.",
    "value4Title": "Inclusive Learning",
    "value4Text": "We believe every child—regardless of background or learning level—should have access to stories that teach, inspire, and reflect who they are."
  },
  "GetStarted": {
    "title": "Ready to Start the Learning Journey?",
    "text": "Download the NoorLingo app and help your child read with confidence, curiosity, and cultural pride.",
    "downloadButton": "Download Now",
    "madeWithLove": "Made with love to help every child read with Confidence!",
    "getStartedTitle": "Get Started with Noorlingo"
  },
  "Whoweare": {
    "title1": "Who We Are",
    "p1_1": "NoorLingo is a UAE-based reading platform that helps Arabic-speaking children master English with confidence, critical thinking, and cultural pride.",
    "p1_2": "Aligned with UAE curriculum standards, we blend storytelling with subject-based learning in science, math, and social understanding.",
    "p1_3": "Our research-backed, culturally rooted approach goes beyond memorization, building real comprehension, character, and a lifelong love of learning.",
    "title2": "Why We Do It",
    "p2_1": "We created NoorLingo because many bright Arabic-speaking children struggle with English—not from lack of ability, but from a lack of tailored tools.",
    "p2_2": "NoorLingo bridges this gap with culturally relevant stories and integrated learning across subjects, helping every child read, think, and thrive.",
    "p2_3": "Our goal is to raise not just strong readers, but confident thinkers and proud learners who contribute to the future of the UAE."
  },
  "AboutUsHome": {
    "title": "Get to Know About Us",
    "text": "NoorLingo is a UAE-based English reading app tailored for Arabic-speaking children. Through engaging storytelling, STEM vocabulary, and culturally rich content, we help young learners read with true comprehension—not just word recognition. Our stories reflect UAE heritage and values, using research-backed methods to foster confidence, focus, and a love for learning. Driven by a mission of cultural pride and educational equity, NoorLingo empowers children across the UAE to become lifelong readers and critical thinkers",
    "learnMore": "Learn More"
  },
  "ScreentimeSection": {
    "title": "What makes NoorLingo a meaningful screen time choice for your child?",
    "card1Title": "Culturally Rich Stories",
    "card1Desc": "Children engage more deeply when stories reflect their culture. NoorLingo builds both language skills and identity through stories rooted in UAE values.",
    "card2Title": "Ad-Free, Safe Environment",
    "card2Desc": "Free from ads and distractions, NoorLingo provides a focused, safe space for meaningful learning.",
    "card3Title": "Purposeful Screen Time",
    "card3Desc": "Designed for comprehension and critical thinking—not just word recognition—every session supports intentional, lasting learning.",
    "card4Title": "Emotional & Academic Growth",
    "card4Desc": "Children build confidence and curiosity while developing reading and thinking skills that support lifelong success."
  },
  "Confidence": {
    "title": "Lighting the path to English through stories from home",
    "banner1": "Made with love to help every child read with Confidence!",
    "banner2": "Empowering students across the UAE with research-backed reading comprehension.",
    "card1Title": "Purposeful Screen Time",
    "card1Desc": "Empowering students across the UAE with research-backed reading comprehension.",
    "card2Title": "Gamified Learning Approach",
    "card2Desc": "Stories grounded in UAE identity, traditions, and values to make reading meaningful.",
    "card3Title": "Improved Focus & Thinking",
    "card3Desc": "Interactive strategies like predicting, visualizing, and summarizing make reading fun and effective"
  },
  "AppSection": {
    "title": "Experience the NoorLingo App",
    "card1Title": "Simple & Safe Onboarding",
    "card1Desc": "Set up is quick and parent-led. Only guardians can create and manage child profiles—ensuring privacy control.",
    "card2Title": "Personalized Profiles",
    "card2Desc": "Add multiple children under one guardian account. Each child gets a tailored learning path based on their level and age.",
    "card3Title": "Research-Backed Learning Design",
    "card3Desc": "NoorLingo uses strategies like predicting, visualizing, and summarizing to improve comprehension—making learning deep, not shallow.",
    "card4Title": "Culturally Inspired UI",
    "card4Desc": "From characters to backgrounds, every detail celebrates UAE culture—making children feel seen and connected while learning."
  },
  "FounderMessage": {
    "title": "A Message from Our Founder",
    "greeting": "Dear Parents,",
    "p1": "After teaching English in UAE classrooms for over 8 years, I saw a repeating challenge—bright, capable students struggling to understand English, not because they lacked potential, but because most learning tools weren’t made for them. I founded NoorLingo to change that.",
    "p2": "Most apps are built for global audiences and teach children how to sound out words—but not how to understand them. Our students needed more than recognition—they needed comprehension, connection, and context. NoorLingo was born to meet that need. We use culturally relevant stories, academic vocabulary, and reading strategies like predicting, visualizing, and summarizing—backed by research and designed for how children really learn.",
    "p3": "At NoorLingo, we’re not just helping kids read. We’re helping them think critically, grow in confidence, and feel proud of who they are.",
    "closing": "With love and purpose",
    "founderName": "Tracey Susan Brauns",
    "founderTitle": "Founder, NoorLingo"
  },
  "Carousel": {
    "title": "Inside the Learning Experience",
    "slide1": "Welcomes users with NoorLingo’s warm identity and characters.",
    "slide2": "Secondary splash with subtle animation or delay before loading.",
    "slide3": "Invites guardians to start their child’s learning journey.",
    "slide4": "Explains how kids will explore stories and real-world words.",
    "slide5": "Highlights fun, interactive mini-games for confident reading.",
    "slide6": "Describes parent insights and learning milestones tracking.",
    "slide7": "Choose to sign up using Google or Email to begin.",
    "slide8": "Guardian enters child's name, email, and password to create an account.",
    "slide9": "Personalizes the experience by asking the child's age group.",
    "slide10": "Selects the child's English level (Beginner to Confident).",
    "slide11": "Final Personal touch to tailor the experience.",
    "slide12": "Allows guardians to sign back into an existing account."
  },
  "ParentGuide": {
    "title": "NoorLingo Parent Guide",
    "section1Title": "1. What is NoorLingo?",
    "section1Text": "NoorLingo is a culturally rooted English reading app designed for Arabic-speaking children aged 5-13. Our mission is to help children become confident readers, critical thinkers, and proud of their heritage while building English fluency.",
    "section2Title": "2. How Does My Child Learn?",
    "section2Text1": "NoorLingo uses the CAFE reading strategies to build strong literacy foundations:",
    "cafeC": "- Comprehension: Understanding the main idea and supporting details.",
    "cafeA": "- Accuracy: Reading words correctly with attention to spelling and meaning.",
    "cafeF": "- Fluency: Reading smoothly with appropriate expression and pacing.",
    "cafeE": "- Expanding Vocabulary: Learning new words in meaningful context.",
    "section2Text2": "For example, when predicting, readers use text clues and background knowledge to make logical guesses about the story.",
    "section2Text3": "All lessons integrate English with science, math, and moral education. Gamified elements like badges and progress bars make reading enjoyable while reinforcing key academic skills.",
    "section3Title": "3. How to Get Started",
    "step1": "Download NoorLingo from the App Store or Google Play (coming soon).",
    "step2": "Create your parent account.",
    "step3": "Add your child's name, age, and grade to build their profile.",
    "step4": "Set time limits and reading goals in your Parent Dashboard.",
    "section4Title": "4. What Makes NoorLingo Different?",
    "diff1": "Stories reflect UAE heritage and traditions.",
    "diff2": "Lessons build comprehension, not just word reading.",
    "diff3": "Designed for second-language learners with full narration and visual supports.",
    "diff4": "Created by UAE-based English teachers and curriculum experts.",
    "section5Title": "5. Is It Safe?",
    "safe1": "No ads, no in-app purchases, and no data shared with third parties.",
    "safe2": "All content is reviewed by UAE-based teachers and curriculum experts for curriculum alignment.",
    "safe3": "Profiles are secure and parent-controlled only.",
    "section6Title": "6. How Can I Track My Child's Progress?",
    "progress1": "Use your Parent Dashboard to see stories read, time spent reading, and quiz scores.",
    "progress2": "Look for growth signs like better vocabulary, improved comprehension, and reading confidence.",
    "section7Title": "7. FAQs",
    "faq1q": "What language is the app in?",
    "faq1a": "English (Arabic support coming soon).",
    "faq2q": "Can my child use it if they can’t read yet?",
    "faq2a": "Yes! All content is narrated.",
    "faq3q": "Can I add more than one child?",
    "faq3a": "Yes, multiple profiles are supported.",
    "faq4q": "Will this replace school reading?",
    "faq4a": "No, it's a great supplement to schoolwork.",
    "section8Title": "8. Support & Contact Info",
    "supportText": "We're here to help! For questions, feedback, or technical issues:",
    "emailLabel": "Email:",
    "phoneLabel": "Phone / WhatsApp:"
  }
}
</file>

<file path="next-intl.config.js">
/** @type {import('next-intl').Config} */
const config = {
  locales: ['en', 'ar'],
  defaultLocale: 'en'
};  

module.exports = config;
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="public/.htaccess">
# For static-exported Next.js or React SPA
<IfModule mod_rewrite.c>
  RewriteEngine On
  # Don’t rewrite files or directories that actually exist
  RewriteCond %{REQUEST_FILENAME} !-f
  RewriteCond %{REQUEST_FILENAME} !-d
  # Rewrite everything else to index.html
  RewriteRule ^ index.html [L]
</IfModule>
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="src/app/[locale]/about/BelowSection.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

function BelowSection() {
  const t = useTranslations("AboutPage");

  return (
    <div className="section-width sectionlayout overflow-hidden  mt-10">
      <h2
        className="text-[#F56A00] text-center font-semibold leading-14"
        style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
      >
        {t('founderTitle')}
      </h2>

      <p
        className="text-[#3C3B3B] text-center mt-4 md:max-w-[72%] mx-auto w-full font-medium"
        style={{ fontSize: "clamp(18px, 1vw, 20px)" }}
      >
        {t('founderText')}
      </p>

      <div className="relative w-full bg-[#FFC100] mt-10 rounded-[30px] pt-16 pb-48 md:py-20 px-4  md:px-12 flex items-center justify-center ">
        {/* Left character */}
        <div className="absolute left-4 bottom-0">
          <Image
            src="/About/boy.png"
            alt="boy"
            width={120}
            height={120}
            className="object-contain"
          />
        </div>

        {/* Right character */}
        <div className="absolute right-4 bottom-0">
          <Image
            src="/Home/confidencegirl.png"
            alt="girl"
            width={120}
            height={120}
            className="object-contain"
          />
        </div>

        <div className="">
          <div className="flex justify-between ">
            <Image
              src="/About/orange star.png"
              alt="stars"
              width={20}
              height={20}
              className="my-4"
            />
            <Image
              src="/About/orange star.png"
              alt="stars"
              width={20}
              height={20}
              className="my-4 mr-4"
            />
          </div>
          <h3
            className="text-white text-center relative font-semibold z-10 px-4"
            style={{ fontSize: "clamp(20px, 2vw, 28px)" }}
          >
            <Image
              src="/About/Stars.png"
              alt="stars"
              width={30}
              height={30}
              className="mb-3"
            />
            {t('founderQuote')}
            <Image
              src="/About/Stars.png"
              alt="stars"
              width={30}
              height={30}
              className="absolute -bottom-6 right-4 "
            />
            <Image
              src="/About/transparent stars.png"
              alt="stars"
              width={30}
              height={30}
              className="absolute -bottom-6 left-4 "
            />
            <Image
              src="/About/transparent stars.png"
              alt="stars"
              width={30}
              height={30}
              className="absolute top-0 right-4  "
            />
          </h3>
          <div className="flex mt-8 justify-between ">
            <Image
              src="/About/orange star.png"
              alt="stars"
              width={20}
              height={20}
              className="my-3"
            />
            <Image
              src="/About/orange star.png"
              alt="stars"
              width={20}
              height={20}
              className="my-3 mr-4"
            />
          </div>
        </div>
      </div>
    </div>
  );
}

export default BelowSection;
</file>

<file path="src/app/[locale]/about/Hero.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

function Hero() {
  const t = useTranslations("AboutHero");

  return (
    <div className="section-width overflow-hidden">
      <div
        className="mt-10 relative flex flex-col justify-center items-center sectionlayout"
        data-aos="fade-up"
      >
        <h2
          className="text-[#F56A00] text-center font-semibold leading-14"
          style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
          data-aos="fade-down"
        >
          {t('title')}
        </h2>
        <p
          className="text-medium text-center md:max-w-[70%] mt-4"
          style={{ fontSize: "clamp(20px,1.4vw,28px)" }}
          data-aos="fade-up"
          data-aos-delay="50"
        >
          {t('subtitle')}
        </p>
        <button
          className="mt-8 md:text-[22px] mx-auto border cursor-pointer hover:text-white border-[#FF5A13] text-[#FF5A13] hover:bg-[#FF5A13] bg-transparent transition-all ease-in-out duration-300 py-3 px-5 rounded-full"
          data-aos="zoom-in"
          data-aos-delay="100"
        >
          {t('watchStory')}
        </button>
      </div>
      <div className="relative w-full h-[200px] md:h-[220px] lg:h-[700px] img md:mt-[-8vh] z-0">
        <Image
          src="/Home/hero.png"
          alt="Hero Illustration"
          fill
          style={{ objectFit: "contain" }}
          className="hero-img pointer-events-none select-none"
          priority
          sizes="(max-width: 768px) 100vw,
                            (max-width: 1200px) 80vw,
                            70vw"
        />
      </div>
    </div>
  );
}

export default Hero;
</file>

<file path="src/app/[locale]/about/MissionValues.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

interface ValueItem {
  title: string;
  para: string;
  img: string;
}

function MissionValues() {
  const t = useTranslations("MissionValues");
  const data: ValueItem[] = [
    {
      title: t("value1Title"),
      para: t("value1Text"),
      img: "/About/eagle.png",
    },
    {
      title: t("value2Title"),
      para: t("value2Text"),
      img: "/About/cultural.png",
    },
    {
      title: t("value3Title"),
      para: t("value3Text"),
      img: "/About/criticalthinking.png",
    },
    {
      title: t("value4Title"),
      para: t("value4Text"),
      img: "/About/heart.png",
    },
  ];

  return (
    <div className="sectionlayout section-width overflow-hidden justify-items-center mx-auto">
      <h2
        className="text-[#F56A00] text-center mt-20 font-semibold leading-14"
        style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
        data-aos="fade-down"
      >
        {t('missionTitle')}
      </h2>

      <div
        className=" flex justify-center items-center md:space-x-20 md:ml-40 mt-10 space-x-0 md:flex-row flex-col-reverse"
        data-aos="fade-up"
      >
        <div className="w-full  md:w-[60%]">
          <h2
            className="text-[#F56A00]  md:tex-left text-center font-semibold leading-14"
            style={{ fontSize: "clamp(36px, 2.6vw, 49px)" }}
            data-aos="fade-right"
          >
            {t('whyWeExistTitle')}
          </h2>
          <p
            className="text-medium md:tex-left text-center text-[#3C3B3B] mt-4"
            style={{ fontSize: "clamp(20px,1.4vw,28px)" }}
            data-aos="fade-right"
            data-aos-delay="50"
          >
            {t('whyWeExistText')}
          </p>
        </div>
        <div className="md:w-[40%] w-full mb-6 md:mb-0" data-aos="fade-left">
          <Image
            src="/About/mission.png"
            alt="Mission"
            width={445}
            height={516}
            className=" object-contain"
          />
        </div>
      </div>

      <div className="mt-10">
        <h2
          className="text-[#F56A00] text-center font-semibold leading-14"
          style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
          data-aos="fade-down"
        >
          {t('coreValuesTitle')}
        </h2>

        <p
          className="text-[#3C3B3B] text-center mt-4 md:max-w-[72%] mx-auto w-full font-medium"
          style={{ fontSize: "clamp(18px, 1vw, 20px)" }}
          data-aos="fade-up"
        >
          {t('coreValuesText')}
        </p>

        <div
          className="my-28 md:py-10 "
          style={{
            backgroundImage: `url('/About/bg.png')`,
            backgroundSize: "contain",
            backgroundRepeat: "no-repeat",
            backgroundPosition: "center",
          }}
          data-aos="fade-up"
        >
          <div className="grid grid-cols-1 md:grid-cols-2 gap-y-28 gap-x-8  mx-auto">
            {data.map((item, index) => (
              <div
                key={index}
                className="relative flex flex-col items-center text-center bg-[#FFC1AC] rounded-[22px] shadow-md p-6 pt-16"
                data-aos="zoom-in"
                data-aos-delay={index * 10}
              >
                <div className="absolute -top-22 left-1/2 -translate-x-1/2">
                  <Image width={124} height={150} src={item.img} alt={item.title} className="mb-0" />
                </div>
                <h3 className="text-[clamp(20px,1.3vw,26px)] font-semibold text-[#3C3B3B] mb-2 mt-8">
                  {item.title}
                </h3>
                <p className="text-[#3C3B3B] text-base font-medium">
                  {item.para}
                </p>
              </div>
            ))}
          </div>
        </div>
      </div>
    </div>
  );
}

export default MissionValues;
</file>

<file path="src/app/[locale]/about/MobileSection.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

function MobileSection() {
  const t = useTranslations("GetStarted");

  return (
    <>
      <div
        className="section-width sectionlayout overflow-hidden "
        data-aos="fade-up"
      >
        <h2
          className="text-[#F56A00] text-center mt-16 font-semibold leading-14"
          style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
          data-aos="fade-up"
          data-aos-delay="50"
        >
          {t('title')}
        </h2>

        <p
          className="text-[#3C3B3B] text-center mt-4 md:max-w-[72%] mx-auto w-full font-medium"
          style={{ fontSize: "clamp(18px, 1vw, 20px)" }}
          data-aos="fade-up"
          data-aos-delay="100"
        >
          {t('text')}
        </p>

        <div
          className="flex justify-center"
          data-aos="zoom-in"
          data-aos-delay="150"
        >
          <button className="mt-8 md:text-[20px] border cursor-pointer text-white border-[#FF5A13] hover:text-[#FF5A13] bg-[#FF5A13] hover:bg-transparent transition-all ease-in-out duration-300 py-2 px-4 rounded-full">
            {t('downloadButton')}
          </button>
        </div>
        <div className="relative" data-aos="fade-up" data-aos-delay="200">
          <div className="hidden md:block">
            <Image
              src="/About/diamond.png"
              alt="diamond"
              width={70}
              height={70}
              className="my-4 absolute left-32 top-20 hideen md:block"
              data-aos="fade-right"
              data-aos-delay="250"
            />
            <Image
              src="/About/cartoon1.png"
              alt="cartoon1"
              width={70}
              height={70}
              className="my-4 absolute right-32 top-32 hideen md:block"
              data-aos="fade-left"
              data-aos-delay="300"
            />
            <Image
              src="/About/coin.png"
              alt="coin"
              width={70}
              height={70}
              className="my-4 absolute right-32 bottom-32 hideen md:block"
              data-aos="fade-left"
              data-aos-delay="350"
            />
            <Image
              src="/About/image 16.png"
              alt="image 16"
              width={70}
              height={70}
              className="my-4 absolute left-32 bottom-32 hideen md:block"
              data-aos="fade-right"
              data-aos-delay="400"
            />
          </div>
          <div className="flex md:hidden justify-between md:w-[75%] mx-auto -mb-[30px]">
            <Image
              src="/About/diamond.png"
              alt="diamond"
              width={70}
              height={70}
              className="my-4"
              data-aos="fade-right"
              data-aos-delay="200"
            />
            <Image
              src="/About/cartoon1.png"
              alt="cartoon1"
              width={70}
              height={70}
              className="my-4 mr-4"
              data-aos="fade-left"
              data-aos-delay="250"
            />
          </div>

          <div
            className="flex justify-center  items-center z-30"
            data-aos="zoom-in"
            data-aos-delay="300"
          >
            <Image
              src="/Home/experience/Screen1.png"
              alt="Mobile App"
              width={397}
              height={802}
              className="max-h-[100vh] mt-10  object-cover "
            />
          </div>
          <div className="flex md:hidden z-50 -mt-[10px] md:-mt-[100px] justify-between md:w-[75%] mx-auto">
            <Image
              src="/About/coin.png"
              alt="coin"
              width={70}
              height={70}
              className="my-4"
              data-aos="fade-right"
              data-aos-delay="700"
            />
            <Image
              src="/About/cartoon2.png"
              alt="cartoon2"
              width={70}
              height={70}
              className="my-4 mr-4"
              data-aos="fade-left"
              data-aos-delay="350"
            />
          </div>
        </div>
      </div>
      <div
        className="relative w-full -mt-14 md:-mt-32 -z-10"
        data-aos="fade-up"
        data-aos-delay="400"
      >
        <Image
          src="/About/belowbg.png"
          alt="background"
          width={1920}
          height={1080}
          className="w-full mt-10 max-h-[60vh] "
          style={{ objectFit: "fill" }}
        />

        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
          <div
            className="bg-[#FF6E00] px-4 py-3 mt-20 md:mt-32  pointer-events-auto"
            data-aos="zoom-in"
            data-aos-delay="450"
          >
            <h4 className="font-extrabold text-white text-[16px] lg:text-[22px] text-center">
              {t('madeWithLove')}
            </h4>
          </div>
        </div>
      </div>
    </>
  );
}

export default MobileSection;
</file>

<file path="src/app/[locale]/about/page.tsx">
import Hero from './Hero'
import React from 'react'
import MissionValues from './MissionValues'
import BelowSection from './BelowSection'
import MobileSection from './MobileSection'

export default function about() {
  return (
    <div>
      <Hero />
      <MissionValues />
      <BelowSection />
      <MobileSection />
    </div>
  )
}
</file>

<file path="src/app/[locale]/contact/ContactForm.tsx">
"use client";
import { useState } from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function ContactForm() {
  const t = useTranslations("ContactForm");
  const [form, setForm] = useState({
    firstName: "",
    lastName: "",
    email: "",
    message: "",
  });

  const handleChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    setForm({ ...form, [e.target.name]: e.target.value });
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    console.log("Form submitted", form);
  };

  return (
    <div className="sectionlayout section-width overflow-hidden ">
      <h2
        className="text-[#F56A00] mt-12 text-center font-semibold"
        style={{ fontSize: "clamp(45px, 3.2vw, 64px)" }}
        data-aos="fade-down"
      >
        {t('title')}
      </h2>
      <p
        className="text-center text-[#3C3B3B] mt-2 mb-10 text-lg"
        data-aos="fade-up"
        data-aos-delay="30"
      >
        {t('subtitle')}
      </p>

      <div
        className="flex flex-col-reverse md:flex-row md:ps-12 md:mt-10 justify-between"
        data-aos="fade-up"
        data-aos-delay="60"
      >
        <form
          onSubmit={handleSubmit}
          className="w-full md:w-[65%] space-y-4"
          data-aos="fade-right"
          data-aos-delay="90"
        >
          <div className="flex flex-col md:flex-row gap-4">
            <div className="flex-1">
              <label className="block mb-1 text-sm text-[#3C3B3B] font-medium text-start">{t('firstName')}</label>
              <input
                name="firstName"
                type="text"
                placeholder={t('firstNamePlaceholder')}
                className="w-full border border-gray-300 focus:outline-[#F56A00] px-4 py-3 rounded-md"
                value={form.firstName}
                onChange={handleChange}
                required
              />
            </div>

            <div className="flex-1">
              <label className="block mb-1 text-sm text-[#3C3B3B] font-medium text-start">{t('lastName')}</label>
              <input
                name="lastName"
                type="text"
                placeholder={t('lastNamePlaceholder')}
                className="w-full border border-gray-300 focus:outline-[#F56A00] px-4 py-3 rounded-md"
                value={form.lastName}
                onChange={handleChange}
                required
              />
            </div>
          </div>

          <div>
            <label className="block mb-1 text-sm text-[#3C3B3B] font-medium text-start">{t('email')}</label>
            <input
              name="email"
              type="email"
              placeholder={t('emailPlaceholder')}
              className="w-full border border-gray-300 focus:outline-[#F56A00] px-4 py-3 rounded-md"
              value={form.email}
              onChange={handleChange}
              required
            />
          </div>

          <div>
            <label className="block mb-1 text-sm text-[#3C3B3B] font-medium text-start">{t('message')}</label>
            <textarea
              name="message"
              placeholder={t('messagePlaceholder')}
              rows={5}
              maxLength={200}
              className="w-full border border-gray-300 focus:outline-[#F56A00] px-4 py-3 rounded-md resize-none"
              value={form.message}
              onChange={handleChange}
              required
            />
            <p className="text-xs text-end text-gray-500 mt-1">
              {t('maxChars')} <br /> {t('mandatory')}
            </p>
          </div>
          <div className="flex justify-center">
            <button
              type="submit"
              className="mt-4 border border-[#F56A00] text-[#F56A00] hover:bg-[#F56A00] hover:text-white transition px-20 cursor-pointer py-2 rounded-full text-lg font-semibold"
            >
              {t('send')}
            </button>
          </div>
        </form>

        <div
          className="mt-10 md:mt-0 md:w-[35%] mb-8 md:mb-0 flex justify-center items-start"
          data-aos="fade-left"
          data-aos-delay="160"
        >
          <Image
            src="/About/eagle 2.png"
            alt="Owl Reading Book"
            width={220}
            height={220}
            className="object-contain"
          />
        </div>
      </div>
    </div>
  );
}

export default ContactForm;
</file>

<file path="src/app/[locale]/contact/Mobile.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

function Mobile() {
  const t = useTranslations("GetStarted");

  return (
    <>
      <div className=" overflow-hidden " data-aos="fade-up">
        <Image
          src="/About/belowbg.png"
          alt="background"
          width={1920}
          height={1080}
          className="w-full mt-10 max-h-[60vh] "
          style={{ objectFit: "fill" }}
        />
        <div className="section-width sectionlayout " data-aos="fade-up">
          <h2
            className="text-[#F56A00] text-center mt-16 font-semibold leading-14"
            style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
            data-aos="zoom-in"
          >
            {t('getStartedTitle')}
          </h2>

          <div
            className="flex justify-center"
            data-aos="fade-up"
            data-aos-delay="50"
          >
            <button className="mt-8 md:text-[20px] border cursor-pointer text-white border-[#FF5A13] hover:text-[#FF5A13] bg-[#FF5A13] hover:bg-transparent transition-all ease-in-out duration-300 py-2 px-4 rounded-full">
              {t('downloadButton')}
            </button>
          </div>
          <div className="relative" data-aos="fade-up" data-aos-delay="100">
            <div className="hidden md:block">
              <Image
                src="/About/diamond.png"
                alt="diamond"
                width={70}
                height={70}
                className="my-4 absolute left-44 top-20 hideen md:block"
                data-aos="fade-right"
                data-aos-delay="150"
              />
              <Image
                src="/About/cartoon1.png"
                alt="cartoon1"
                width={70}
                height={70}
                className="my-4 absolute right-44 top-32 hideen md:block"
                data-aos="fade-left"
                data-aos-delay="200"
              />
              <Image
                src="/About/coin.png"
                alt="coin"
                width={70}
                height={70}
                className="my-4 absolute right-44 bottom-32 hideen md:block"
                data-aos="fade-left"
                data-aos-delay="250"
              />
              <Image
                src="/About/image 16.png"
                alt="image 16"
                width={70}
                height={70}
                className="my-4 absolute left-44 bottom-32 hideen md:block"
                data-aos="fade-right"
                data-aos-delay="300"
              />
            </div>
            <div className="flex md:hidden justify-between md:w-[75%] mx-auto -mb-[30px]">
              <Image
                src="/About/diamond.png"
                alt="diamond"
                width={70}
                height={70}
                className="my-4"
                data-aos="fade-right"
                data-aos-delay="150"
              />
              <Image
                src="/About/cartoon1.png"
                alt="cartoon1"
                width={70}
                height={70}
                className="my-4 mr-4"
                data-aos="fade-left"
                data-aos-delay="200"
              />
            </div>

            <div
              className="flex justify-center  items-center z-30"
              data-aos="zoom-in"
              data-aos-delay="350"
            >
              <Image
                src="/About/mobile.png"
                alt="Mobile App"
                width={397}
                height={802}
                className="max-h-[100vh] mt-10  object-cover "
              />
            </div>
            <div className="flex md:hidden z-50 -mt-[10px] md:-mt-[100px] justify-between md:w-[75%] mx-auto">
              <Image
                src="/About/coin.png"
                alt="coin"
                width={70}
                height={70}
                className="my-4"
                data-aos="fade-right"
                data-aos-delay="300"
              />
              <Image
                src="/About/cartoon2.png"
                alt="cartoon2"
                width={70}
                height={70}
                className="my-4 mr-4"
                data-aos="fade-left"
                data-aos-delay="350"
              />
            </div>
          </div>
        </div>
        <div
          className="relative w-full -mt-14  -z-10"
          data-aos="fade-up"
          data-aos-delay="40000"
        >
          <Image
            src="/About/belowbg.png"
            alt="background"
            width={1920}
            height={1080}
            className="w-full mt-10 max-h-[60vh] "
            style={{ objectFit: "fill" }}
          />

          <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
            <div
              className="bg-[#FF6E00] px-4 py-3 mt-20 md:mt-32 md:rotate-[7deg] pointer-events-auto"
              data-aos="zoom-in-up"
              data-aos-delay="450"
            >
              <h4 className="font-extrabold text-white text-[16px] lg:text-[22px] text-center">
                {t('madeWithLove')}
              </h4>
            </div>
          </div>
        </div>
      </div>
    </>
  );
}

export default Mobile;
</file>

<file path="src/app/[locale]/contact/page.tsx">
import React from 'react'
import ContactForm from './ContactForm'
import Mobile from './Mobile'

function contact() {
  return (
    <div>
      <ContactForm />
      <Mobile />
    </div>
  )
}

export default contact
</file>

<file path="src/app/[locale]/globals.css">
@import "tailwindcss";

 * {
  font-family: var(--font-baloo), var(--font-baloo-ar), cursive !important;
}

:root {
  --background: #ffffff;
  --font-baloo: 'Baloo 2', cursive;
  --foreground: #171717;
}

body {
  font-family: var(--font-baloo);
}

/* @theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);

} */
/* 
@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
} */
 * {
  font-family: 'Baloo 2', cursive !important;
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}

.baloo {
  font-family: 'Baloo 2', cursive;
}

.primary{
  color: #F56A00;
}

.section-width{
  max-width: 1800px;
  box-sizing: border-box;
  width: 100%;
  margin: auto;
}

/* *{
  border: 1px solid red;
} */

@media (min-width: 1024px) {  /* Large screens (lg) */
  .hero-img {
    height: 600px;
  }
}

@media (min-width: 1280px) {  /* Extra Large screens (xl) */
  .hero-img {
    height: 720px;
  }
}

@media (min-width: 1636px) {  /* 2XL screens */
  .hero-img {
    height: 900px;
    margin-top: 60px !important;
  }

  .mt-large{
    margin-top: 10px !important;  
  }
}
.sectionlayout{

  padding: 0 1.1rem;
}
</file>

<file path="src/app/[locale]/layout.tsx">
import './globals.css';
// import { ReactNode } from 'react';
import Navbar from '@/components/Navbar/Navbar';
import Footer from '@/components/Footer/Footer';
import { Baloo_2, Baloo_Bhaijaan_2 } from 'next/font/google';
import AosInitializer from '@/components/Animations/AosInitializer';
import "slick-carousel/slick/slick.css";
import "slick-carousel/slick/slick-theme.css";
import { NextIntlClientProvider } from 'next-intl';
import { getMessages } from 'next-intl/server';

const baloo = Baloo_2({
  subsets: ["latin"],
  weight: ["400", "700", "800"],
  variable: '--font-baloo'
});

const balooBhaijaan = Baloo_Bhaijaan_2({
  subsets: ['arabic'],
  weight: ["400", "700", "800"],
  variable: '--font-baloo-ar'
});

export const metadata = {
  title: 'NoorLingo – Learn English the Fun Way',
  description: 'An interactive English learning platform for kids in the UAE.'
};

interface Props {
  children: React.ReactNode;
  params: { locale: string };
}

export default async function RootLayout(props: Props) {
  const { children } = props;
  const params = await props.params; // ✅ Await `params` safely

  const messages = await getMessages({ locale: params.locale });
  const fontClass = params.locale === 'ar' ? balooBhaijaan.variable : baloo.variable;
  const direction = params.locale === 'ar' ? 'rtl' : 'ltr';

  return (
    <html lang={params.locale} dir={direction} suppressHydrationWarning>
      <head />
      <body className={`${fontClass} bg-white text-gray-900 min-h-screen flex flex-col`}>
        <NextIntlClientProvider locale={params.locale} messages={messages}>
          <Navbar />
          <AosInitializer />
          <main className="flex-grow flex flex-col">{children}</main>
          <Footer />
        </NextIntlClientProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/[locale]/page.tsx">
import Hero from "@/components/Home/Hero";
import Whoweare from "@/components/Home/Whoweare";
import About from "@/components/Home/About";
import Screentime from "@/components/Home/Screentime";
import Confidence from "@/components/Home/Confidence";
import App from "@/components/Home/App";
import Experience from "@/components/Home/Experience";
import Founder from "@/components/Home/Founder";
import Download from "@/components/Home/Download";

export default function Home() {
  return (
    <div>
      <Hero />
      <Whoweare />
      <About />
      <Screentime />
      <Confidence />
      <App />
      <Experience />
      <Founder />
      <Download />
    </div>
  );
}
</file>

<file path="src/app/[locale]/parentguide/page.tsx">
"use client";
import React from "react";
import { useTranslations } from "next-intl";

const PolicyPage = () => {
  const t = useTranslations("ParentGuide");

  return (
    <div className="max-w-4xl mx-auto px-4 py-10 text-gray-800">
      <h1 className="text-3xl font-bold mb-6">{t("title")}</h1>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section1Title")}</h2>
        <p>{t("section1Text")}</p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section2Title")}</h2>
        <p className="mb-2">{t("section2Text1")}</p>
        <ul className="list-none list-inside mb-2">
          <li>
            <strong>C</strong> {t("cafeC")}
          </li>
          <li>
            <strong>A</strong> {t("cafeA")}
          </li>
          <li>
            <strong>F</strong> {t("cafeF")}
          </li>
          <li>
            <strong>E</strong> {t("cafeE")}
          </li>
        </ul>
        <p className="mb-2">{t("section2Text2")}</p>
        <p>{t("section2Text3")}</p>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section3Title")}</h2>
        <ol className="list-decimal list-inside space-y-1">
          <li>{t("step1")}</li>
          <li>{t("step2")}</li>
          <li>{t("step3")}</li>
          <li>{t("step4")}</li>
        </ol>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section4Title")}</h2>
        <ul className="list-disc list-inside space-y-1">
          <li>{t("diff1")}</li>
          <li>{t("diff2")}</li>
          <li>{t("diff3")}</li>
          <li>{t("diff4")}</li>
        </ul>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section5Title")}</h2>
        <ul className="list-disc list-inside space-y-1">
          <li>{t("safe1")}</li>
          <li>{t("safe2")}</li>
          <li>{t("safe3")}</li>
        </ul>
      </section>

      <section className="mb-8">
        <h2 className="text-2xl font-semibold mb-2">{t("section6Title")}</h2>
        <p className="mb-2">{t("progress1")}</p>
        <p>{t("progress2")}</p>
      </section>

      <section className="mb-12">
        <h2 className="text-2xl font-semibold mb-4">{t("section7Title")}</h2>
        <div className="space-y-4">
          {/* FAQ 1 */}
          <details className="group border border-gray-200 rounded-lg transition hover:shadow-md">
            <summary className="flex justify-between items-center px-5 py-4 cursor-pointer font-medium text-gray-800">
              <span>{t("faq1q")}</span>
              <span className="transition group-open:rotate-45">+</span>
            </summary>
            <div className="px-5 pb-4 text-bold text-black">{t("faq1a")}</div>
          </details>

          {/* FAQ 2 */}
          <details className="group border border-gray-200 rounded-lg transition hover:shadow-md">
            <summary className="flex justify-between items-center px-5 py-4 cursor-pointer font-medium text-gray-800">
              <span>{t("faq2q")}</span>
              <span className="transition group-open:rotate-45">+</span>
            </summary>
            <div className="px-5 pb-4 text-bold text-black">{t("faq2a")}</div>
          </details>

          {/* FAQ 3 */}
          <details className="group border border-gray-200 rounded-lg transition hover:shadow-md">
            <summary className="flex justify-between items-center px-5 py-4 cursor-pointer font-medium text-gray-800">
              <span>{t("faq3q")}</span>
              <span className="transition group-open:rotate-45">+</span>
            </summary>
            <div className="px-5 pb-4 text-bold text-black">{t("faq3a")}</div>
          </details>

          {/* FAQ 4 */}
          <details className="group border border-gray-200 rounded-lg transition hover:shadow-md">
            <summary className="flex justify-between items-center px-5 py-4 cursor-pointer font-medium text-gray-800">
              <span>{t("faq4q")}</span>
              <span className="transition group-open:rotate-45">+</span>
            </summary>
            <div className="px-5 pb-4 text-bold text-black">{t("faq4a")}</div>
          </details>
        </div>
      </section>

      <section>
        <h2 className="text-2xl font-semibold mb-2">{t("section8Title")}</h2>
        <p className="mb-1">{t("supportText")}</p>
        <p>
          {t("emailLabel")}{" "}
          <a
            href="mailto:support@noorlingokids.com"
            className="text-blue-600 no-underline"
          >
            support@noorlingokids.com
          </a>
        </p>
        <p>
          {t("phoneLabel")}{" "}
          <a href="tel:+971502389602" className="text-blue-600 no-underline">
            +971 50 238 9602
          </a>
        </p>
      </section>
    </div>
  );
};

export default PolicyPage;
</file>

<file path="src/components/Animations/AnimatedContent.tsx">
"use client"
import React, { useRef, useEffect, ReactNode } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";

gsap.registerPlugin(ScrollTrigger);

interface AnimatedContentProps {
  children: ReactNode;
  distance?: number;
  direction?: "vertical" | "horizontal";
  reverse?: boolean;
  duration?: number;
  ease?: string | ((progress: number) => number);
  initialOpacity?: number;
  animateOpacity?: boolean;
  scale?: number;
  threshold?: number;
  delay?: number;
  onComplete?: () => void;
}

const AnimatedContent: React.FC<AnimatedContentProps> = ({
  children,
  distance = 100,
  direction = "vertical",
  reverse = false,
  duration = 0.8,
  ease = "power3.out",
  initialOpacity = 0,
  animateOpacity = true,
  scale = 1,
  threshold = 0.1,
  delay = 0,
  onComplete,
}) => {
  const ref = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const el = ref.current;
    if (!el) return;

    const axis = direction === "horizontal" ? "x" : "y";
    const offset = reverse ? -distance : distance;
    const startPct = (1 - threshold) * 100;

    gsap.set(el, {
      [axis]: offset,
      scale,
      opacity: animateOpacity ? initialOpacity : 1,
    });

    gsap.to(el, {
      [axis]: 0,
      scale: 1,
      opacity: 1,
      duration,
      ease,
      delay,
      onComplete,
      scrollTrigger: {
        trigger: el,
        start: `top ${startPct}%`,
        toggleActions: "play none none none",
        once: true,
      },
    });

    return () => {
      ScrollTrigger.getAll().forEach((t) => t.kill());
      gsap.killTweensOf(el);
    };
  }, [
    distance,
    direction,
    reverse,
    duration,
    ease,
    initialOpacity,
    animateOpacity,
    scale,
    threshold,
    delay,
    onComplete,
  ]);

  return <div ref={ref}>{children}</div>;
};

export default AnimatedContent;
</file>

<file path="src/components/Animations/AosInitializer.tsx">
"use client";
import { useEffect } from "react";
import AOS from "aos";
import "aos/dist/aos.css";

export default function AosInitializer() {
  useEffect(() => {
    AOS.init({ duration: 1000 });
  }, []);
  return null;
}
</file>

<file path="src/components/Animations/BlurText.tsx">
"use client"
import { motion, Transition } from "framer-motion";
import { useEffect, useRef, useState, useMemo } from "react";

type BlurTextProps = {
  text?: string;
  delay?: number;
  className?: string;
  animateBy?: "words" | "letters";
  direction?: "top" | "bottom";
  threshold?: number;
  rootMargin?: string;
  animationFrom?: Record<string, string | number>;
  animationTo?: Array<Record<string, string | number>>;
  easing?: (t: number) => number;
  onAnimationComplete?: () => void;
  stepDuration?: number;
};

const buildKeyframes = (
  from: Record<string, string | number>,
  steps: Array<Record<string, string | number>>
): Record<string, Array<string | number>> => {
  const keys = new Set<string>([
    ...Object.keys(from),
    ...steps.flatMap((s) => Object.keys(s)),
  ]);

  const keyframes: Record<string, Array<string | number>> = {};
  keys.forEach((k) => {
    keyframes[k] = [from[k], ...steps.map((s) => s[k])];
  });
  return keyframes;
};

const BlurText: React.FC<BlurTextProps> = ({
  text = "",
  delay = 200,
  className = "",
  animateBy = "words",
  direction = "top",
  threshold = 0.1,
  rootMargin = "0px",
  animationFrom,
  animationTo,
  easing = (t) => t,
  onAnimationComplete,
  stepDuration = 0.35,
}) => {
  const elements = animateBy === "words" ? text.split(" ") : text.split("");
  const [inView, setInView] = useState(false);
  const ref = useRef<HTMLParagraphElement>(null);

  useEffect(() => {
    if (!ref.current) return;
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setInView(true);
          observer.unobserve(ref.current as Element);
        }
      },
      { threshold, rootMargin }
    );
    observer.observe(ref.current);
    return () => observer.disconnect();
  }, [threshold, rootMargin]);

  const defaultFrom = useMemo(
    () =>
      direction === "top"
        ? { filter: "blur(10px)", opacity: 0, y: -50 }
        : { filter: "blur(10px)", opacity: 0, y: 50 },
    [direction]
  );

  const defaultTo = useMemo(
    () => [
      {
        filter: "blur(5px)",
        opacity: 0.5,
        y: direction === "top" ? 5 : -5,
      },
      { filter: "blur(0px)", opacity: 1, y: 0 },
    ],
    [direction]
  );

  const fromSnapshot = animationFrom ?? defaultFrom;
  const toSnapshots = animationTo ?? defaultTo;

  const stepCount = toSnapshots.length + 1;
  const totalDuration = stepDuration * (stepCount - 1);
  const times = Array.from({ length: stepCount }, (_, i) =>
    stepCount === 1 ? 0 : i / (stepCount - 1)
  );

  return (
    <p ref={ref} className={`blur-text ${className} flex flex-wrap`}>
      {elements.map((segment, index) => {
        const animateKeyframes = buildKeyframes(fromSnapshot, toSnapshots);

        const spanTransition: Transition & { ease: (t: number) => number } = {
          duration: totalDuration,
          times,
          delay: (index * delay) / 1000,
          ease: easing,
        };

        return (
          <motion.span
            key={index}
            initial={fromSnapshot}
            animate={inView ? animateKeyframes : fromSnapshot}
            transition={spanTransition}
            onAnimationComplete={
              index === elements.length - 1 ? onAnimationComplete : undefined
            }
            style={{
              display: "inline-block",
              willChange: "transform, filter, opacity",
            }}
          >
            {segment === " " ? "\u00A0" : segment}
            {animateBy === "words" && index < elements.length - 1 && "\u00A0"}
          </motion.span>
        );
      })}
    </p>
  );
};

export default BlurText;
</file>

<file path="src/components/Animations/SplitText.tsx">
"use client"
import React, { useRef, useEffect } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { SplitText as GSAPSplitText } from "gsap/SplitText";

gsap.registerPlugin(ScrollTrigger, GSAPSplitText);

export interface SplitTextProps {
  text: string;
  className?: string;
  delay?: number;
  duration?: number;
  ease?: string | ((t: number) => number);
  splitType?: "chars" | "words" | "lines" | "words, chars";
  from?: gsap.TweenVars;
  to?: gsap.TweenVars;
  threshold?: number;
  rootMargin?: string;
  textAlign?: React.CSSProperties["textAlign"];
  onLetterAnimationComplete?: () => void;
}

const SplitText: React.FC<SplitTextProps> = ({
  text,
  className = "",
  delay = 100,
  duration = 0.6,
  ease = "power3.out",
  splitType = "chars",
  from = { opacity: 0, y: 40 },
  to = { opacity: 1, y: 0 },
  threshold = 0.1,
  rootMargin = "-100px",
  textAlign = "center",
  onLetterAnimationComplete,
}) => {
  const ref = useRef<HTMLParagraphElement>(null);
  const animationCompletedRef = useRef(false);
  const scrollTriggerRef = useRef<ScrollTrigger | null>(null);

  useEffect(() => {
    if (typeof window === "undefined" || !ref.current || !text) return;

    const el = ref.current;
    
    animationCompletedRef.current = false;

    const absoluteLines = splitType === "lines";
    if (absoluteLines) el.style.position = "relative";

    let splitter: GSAPSplitText;
    try {
      splitter = new GSAPSplitText(el, {
        type: splitType,
        absolute: absoluteLines,
        linesClass: "split-line",
      });
    } catch (error) {
      console.error("Failed to create SplitText:", error);
      return;
    }

    let targets: Element[];
    switch (splitType) {
      case "lines":
        targets = splitter.lines;
        break;
      case "words":
        targets = splitter.words;
        break;
      case "chars":
        targets = splitter.chars;
        break;
      default:
        targets = splitter.chars;
    }

    if (!targets || targets.length === 0) {
      console.warn("No targets found for SplitText animation");
      splitter.revert();
      return;
    }

    targets.forEach((t) => {
      (t as HTMLElement).style.willChange = "transform, opacity";
    });

    const startPct = (1 - threshold) * 100;
    const marginMatch = /^(-?\d+(?:\.\d+)?)(px|em|rem|%)?$/.exec(rootMargin);
    const marginValue = marginMatch ? parseFloat(marginMatch[1]) : 0;
    const marginUnit = marginMatch ? (marginMatch[2] || "px") : "px";
    const sign = marginValue < 0 ? `-=${Math.abs(marginValue)}${marginUnit}` : `+=${marginValue}${marginUnit}`;
    const start = `top ${startPct}%${sign}`;

    const tl = gsap.timeline({
      scrollTrigger: {
        trigger: el,
        start,
        toggleActions: "play none none none",
        once: true,
        onToggle: (self) => {
          scrollTriggerRef.current = self;
        },
      },
      smoothChildTiming: true,
      onComplete: () => {
        animationCompletedRef.current = true;
        gsap.set(targets, {
          ...to,
          clearProps: "willChange",
          immediateRender: true,
        });
        onLetterAnimationComplete?.();
      },
    });

    tl.set(targets, { ...from, immediateRender: false, force3D: true });
    tl.to(targets, {
      ...to,
      duration,
      ease,
      stagger: delay / 1000,
      force3D: true,
    });

    return () => {
      tl.kill();
      if (scrollTriggerRef.current) {
        scrollTriggerRef.current.kill();
        scrollTriggerRef.current = null;
      }
      gsap.killTweensOf(targets);
      if (splitter) {
        splitter.revert();
      }
    };
  }, [
    text,
    delay,
    duration,
    ease,
    splitType,
    from,
    to,
    threshold,
    rootMargin,
    onLetterAnimationComplete,
  ]);

  return (
    <p
      ref={ref}
      className={`split-parent overflow-hidden inline-block whitespace-normal ${className}`}
      style={{
        textAlign,
        wordWrap: "break-word",
      }}
    >
      {text}
    </p>
  );
};

export default SplitText;
</file>

<file path="src/components/Footer/Footer.tsx">
"use client";
import React from "react";
import Image from "next/image";
import Link from 'next/link';
import { useTranslations } from "next-intl";

function Footer() {
    const t = useTranslations("Footer");

  return (
    <>
      {/* first section */}
      <div className="section-width mx-auto !mt-20 px-6">
        <div className="flex flex-col md:flex-row justify-between items-center gap-10">
          <div className="flex flex-col justify-center items-center gap-4">
            <h3 className="text-[clamp(28px,3.5vw,64px)] text-[#7E5005] font-[700]">
              {t('followUs')}
            </h3>
            <div className="flex flex-row justify-center items-center gap-10">
              {/* Social links... */}
              <a href="https://www.instagram.com">
                <Image src="/Footer/instagram.svg" alt="Instagram" width={36} height={36} />
              </a>
              <a href="https://www.facebook.com">
                <Image src="/Footer/facebook.svg" alt="facebook" width={36} height={36} />
              </a>
              <a href="https://www.youtube.com">
                <Image src="/Footer/youtube.svg" alt="youtube" width={36} height={36} />
              </a>
              <a href="https://www.linkedin.com">
                <Image src="/Footer/linkedin.svg" alt="linkedin" width={36} height={36} />
              </a>
            </div>
          </div>
          <div className="flex flex-col justify-center items-center gap-4">
            <div className="flex flex-col md:flex-row md:pe-4 justify-center items-center gap-6 md:gap-10 md:pb-0 pb-4 text-[clamp(18px,2.5vw,28px)] text-[#7E5005] font-[600]">
              <Link href="/">Home</Link>
              <Link href="/about">About Us</Link>
              <Link href="/contact">Contact Us</Link>
            </div>
            <div className="flex flex-col justify-center md:items-start items-center gap-6 ">
              <h3 className="text-[clamp(18px,2.5vw,28px)] text-[#7E5005] font-[600] ">
                {t('getAccess')}
              </h3>
              <form action="">
                <input
                  type="email"
                  id="newsletter"
                  name="email"
                  placeholder={t('enterEmail')}
                  className="border-2 border-[#F56A00] text-[clamp(16px,2.5vw,24px)] text-[#7E5005] border-e-0 rounded-e-none font-[500] p-3 rounded-xl bg-[#f56a0010]"
                />
                <button className="bg-[#F56A00] text-[clamp(18px,2.5vw,24px)] text-white border-s-0 rounded-s-none hover:bg-[#f59300] cursor-pointer transition duration-200 ease-in-out justify-center border-2 border-[#F56A00] items-center md:p-3 p-[10.5px] rounded-xl">
                  {t('submit')}
                </button>
              </form>
            </div>
          </div>
        </div>
      </div>

      {/* second section */}
      <div className="flex justify-center items-center w-full mx-auto ">
        <Image src="/Footer/footerg2.gif" alt="Gif" width={1802} height={70} style={{objectFit: "contain"}}/>
      </div>

      {/* last section */}
      <div className="section-width mx-auto px-6 !my-10">
        <div className="flex flex-col md:flex-row justify-between items-center gap-10">
          <div className="flex flex-col justify-center md:items-start items-center gap-4">
            <Link href="/">
              <Image src="/Logo.webp" alt="Logo" width={200} height={43} />
            </Link>
            <h3 className="text-[#7E5005] text-[clamp(16px,2vw,24px)] font-[600] max-w-[500px] text-center md:text-start">
                {t('tagline')}
            </h3>
          </div>
          <div className="flex flex-col justify-center items-start gap-4 text-[#7E5005] text-[clamp(16px,2vw,24px)] font-[600] max-w-[500px]">
            <Link href="/">{t('terms')}</Link>
            <Link href="/">{t('privacy')}</Link>
            <Link href="/parentguide">{t('parentGuide')}</Link>
          </div>
        </div>
        <div className="flex justify-center items-center w-full mt-10">
          <p className="text-[#7E5005] text-[clamp(16px,2vw,24px)] font-[600] max-w-[500px]">{t('copyright')}</p>
        </div>
      </div>
    </>
  );
}

export default Footer;
</file>

<file path="src/components/Home/About.tsx">
"use client";
import React from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function About() {
  const t = useTranslations("AboutUsHome");
  return (
    <div className="min-h-[90vh] bg-[#FCFFDF] relative overflow-hidden md:mt-0 mt-40">
      <div className="section-width mx-auto">
        <div className="absolute top-4 right-4 md:top-8 md:right-8 z-10">
          <Image
            src="/Home/bird.png"
            alt="bird"
            width={111}
            height={126}
            className="hidden md:block cursor-pointer w-16 h-18 md:w-20 md:h-24 lg:w-28 lg:h-32"
            priority
          />
        </div>

        <div className="container mx-auto px-4 md:px-8 lg:px-16">
          {/* Header */}
          <div className="flex items-center justify-center py-8 md:py-12">
            <h1 className="text-[#F56A00] text-[clamp(28px,4vw,56px)] font-bold leading-tight text-center">
              {t('title')}
            </h1>
          </div>

          {/* Content with quotes */}
          <div className="relative max-w-7xl mx-auto mb-8 md:mb-12">
            {/* Opening quote */}
            <div className="absolute -top-2 -left-2 md:-top-4 md:-left-4 text-4xl md:text-6xl text-[#7E5005] font-serif z-10">
              &ldquo;
            </div>

            {/* Main text */}
            <p className="text-[clamp(16px,2vw,28px)] leading-relaxed text-center text-[#525252]  relative z-5">
              {t('text')}
            </p>

            {/* Closing quote */}
            <div className="absolute -bottom-2 -right-2 md:-bottom-4 md:-right-4 text-4xl md:text-6xl text-[#7E5005] font-serif z-10">
              &quot;
            </div>
          </div>

          {/* Learn More Button */}
          <div className="flex items-center justify-center mb-4">
            <button className="bg-[#F56A00] hover:bg-[#E55A00] cursor-pointer text-[clamp(14px,1.8vw,18px)] py-3 px-6  md:px-8 rounded-full text-white font-medium  transform hover:scale-105 transition-all duration-300">
              {t('learnMore')}
            </button>
          </div>
        </div>

        {/* Bottom Images */}
        <div className="relative w-full">
          {/* Desktop Layout */}
          <div className="hidden md:flex items-end justify-between px-4 lg:px-8 xl:px-16">
            {/* Camel - Left */}
            <div className="flex-shrink-0">
              <Image
                src="/Home/camel.png"
                alt="camel"
                width={192}
                height={381}
                className="cursor-pointer w-32 h-64 lg:w-48 lg:h-96"
                priority
              />
            </div>

            {/* Eagle - Center (positioned under Learn More button) */}
            <div className="flex-shrink-0 -mt-8">
              <Image
                src="/Home/eagle.png"
                alt="eagle"
                width={231}
                height={279}
                className="cursor-pointer w-40 h-48 lg:w-58 lg:h-70"
                priority
              />
            </div>

            {/* Girl - Right */}
            <div className="flex-shrink-0">
              <Image
                src="/Home/confidencegirl.png"
                alt="girl"
                width={267}
                height={401}
                className="cursor-pointer w-44 h-66 lg:w-67 lg:h-100"
                priority
              />
            </div>
          </div>

          {/* Mobile Layout */}
          <div className="md:hidden flex flex-col items-center space-y-4 px-4">
            <div className="flex items-end justify-center space-x-4">
              <Image
                src="/Home/camel.png"
                alt="camel"
                width={120}
                height={240}
                className="cursor-pointer"
                priority
              />
              <Image
                src="/Home/eagle.png"
                alt="eagle"
                width={140}
                height={170}
                className="cursor-pointer"
                priority
              />
            </div>
            <div className="flex justify-center">
              <Image
                src="/Home/girl.png"
                alt="girl"
                width={160}
                height={240}
                className="cursor-pointer"
                priority
              />
            </div>
          </div>
        </div>
      </div>
    </div>
  );
}

export default About;
</file>

<file path="src/components/Home/App.tsx">
"use client";
import React from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function App() {
  const t = useTranslations("AppSection");
  const data = [
    {
      title: t("card1Title"),
      desc: t("card1Desc"),
      img: "/Home/appsection/card1.png",
      color: "bg-[#FFC1AC]",
      imgWidth: 130,
    },
    {
      title: t("card2Title"),
      desc: t("card2Desc"),
      img: "/Home/appsection/card2.png",
      color: "bg-[#FFE66A]",
      imgWidth: 190,
    },
    {
      title: t("card3Title"),
      desc: t("card3Desc"),
      img: "/Home/appsection/card3.png",
      color: "bg-[#FFE66A]",
      imgWidth: 130,
    },
    {
      title: t("card4Title"),
      desc: t("card4Desc"),
      img: "/Home/appsection/card4.png",
      color: "bg-[#FFC1AC]",
      imgWidth: 190,
    },
  ];

  return (
    <section className="relative w-full min-h-screen overflow-hidden">
      {/* Background */}
      <div
        className="absolute inset-0 bg-no-repeat bg-center"
        style={{
          backgroundImage: `url('/Home/appsection/bg.png')`,
          backgroundSize: "clamp(60%, 4vw, 80%)",
          backgroundPosition: "center top 120px",
        }}
      />
      
      {/* Content Container */}
      <div className="relative z-10 w-full px-4 sm:px-6 lg:px-8 py-12 sm:py-16 lg:py-20">
        <div className="max-w-7xl mx-auto">
          
          {/* Header */}
          <div className="text-center mb-12 sm:mb-16 lg:mb-20">
            <h2 className="text-2xl sm:text-3xl md:text-4xl lg:text-5xl xl:text-6xl text-[#F56A00] font-bold leading-tight px-4 max-w-4xl mx-auto">
              {t('title')}
            </h2>
          </div>

          {/* Cards Grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 gap-6 sm:gap-8 lg:gap-12 max-w-6xl mx-auto">
            {data.map((item, index) => (
              <div
                key={index}
                className={`flex flex-col items-center justify-center text-center p-6 sm:p-8 lg:p-10 rounded-2xl shadow-lg transform hover:scale-105 transition-all duration-300 ease-in-out min-h-[320px] sm:min-h-[380px] lg:min-h-[420px] ${item.color}`}
              >
                {/* Image Container */}
                <div className="flex-shrink-0 mb-4 sm:mb-6">
                  <div className="relative">
                    <Image
                      src={item.img}
                      alt={item.title}
                      width={item.imgWidth}
                      height={217}
                      className="object-contain mx-auto drop-shadow-md"
                      sizes="(max-width: 640px) 120px, (max-width: 1024px) 150px, 190px"
                      priority={index < 2}
                    />
                  </div>
                </div>
                
                {/* Text Content */}
                <div className="flex-1 flex flex-col justify-center">
                  <h3 className="text-lg sm:text-xl lg:text-2xl font-semibold text-gray-800 mb-3 sm:mb-4 leading-tight">
                    {item.title}
                  </h3>
                  <p className="text-sm sm:text-base lg:text-lg text-gray-700 leading-relaxed max-w-sm mx-auto">
                    {item.desc}
                  </p>
                </div>
              </div>
            ))}
          </div>
          
          
        </div>
      </div>
    </section>
  );
}

export default App;
</file>

<file path="src/components/Home/Carousel.tsx">
"use client";

import React from "react";
import Image from "next/image";
import Slider from "react-slick";
import { useTranslations } from "next-intl";

const settings = {
  draggable: true,
  infinite: true, // Enable looping for smooth transitions
  arrows: false, // Remove arrows for better design
  autoplay: false, // Enable autoplay
  dots: false, // Disable dots as it's not in the design
  speed: 700,
  slidesToShow: 4, // Default to 1 slide on mobile
  slidesToScroll: 4,
  pauseOnHover: true, // Pause autoplay on hover
  centerMode: false, // Center the active item
  focusOnSelect: false, // Allow selecting slides by clicking
  responsive: [
    {
      breakpoint: 640,
      settings: {
        slidesToShow: 1,
        slidesToScroll: 1,
        centerMode: true,
        focusOnSelect: false,
      },
    },
    {
      breakpoint: 768,
      settings: {
        slidesToShow: 2,
        slidesToScroll: 2,
      },
    },
    {
      breakpoint: 1024,
      settings: {
        slidesToShow: 3,
        slidesToScroll: 3,
      },
    },
    {
      breakpoint: 1280,
      settings: {
        slidesToShow: 4,
        slidesToScroll: 4,
      },
    },
  ],
};

function Experience() {
  const t = useTranslations("Carousel");

  const data = [
    {
      img: "/Home/experience/Screen1.png",
      title: t("slide1"),
    },
    {
      img: "/Home/experience/Screen2.png",
      title: t("slide2"),
    },
    {
      img: "/Home/experience/Screen3.png",
      title: t("slide3"),
    },
    {
      img: "/Home/experience/Screen4.png",
      title: t("slide4"),
    },
    {
      img: "/Home/experience/Screen5.png",
      title: t("slide5"),
    },
    {
      img: "/Home/experience/Screen6.png",
      title: t("slide6"),
    },
    {
      img: "/Home/experience/Screen7.png",
      title: t("slide7"),
    },
    {
      img: "/Home/experience/Screen8.png",
      title: t("slide8"),
    },
    {
      img: "/Home/experience/Screen9.png",
      title: t("slide9"),
    },
    {
      img: "/Home/experience/Screen10.png",
      title: t("slide10"),
    },
    {
      img: "/Home/experience/Screen11.png",
      title: t("slide11"),
    },
    {
      img: "/Home/experience/Screen12.png",
      title: t("slide12"),
    },
  ];

  return (
    <div className="mx-auto flex justify-center items-center  md:mt-8 px-4 sm:px-6 md:px-8">
      <div className="text-center w-full">
        <h2 className="text-[clamp(26px,5vw,64px)] text-[#F56A00] font-[700] px-6 py-2 pb-10">
          {t('title')}
        </h2>
        <div className="w-full">
          <Slider {...settings}>
            {data.map((item, index) => (
              <div
                key={index}
                className="flex flex-col items-center px-4 sm:px-6 md:px-8"
              >
                <div className="w-full h-[550px]  lg:h-[630px] mb-6 rounded-md overflow-hidden">
                  <Image
                    src={item.img}
                    alt={item.title}
                    layout="responsive"
                    width={500} 
                    height={500} 
                    className="object-cover w-full h-full"
                  />
                </div>
                <h3 className="text-[14px] sm:text-[16px] md:text-[18px] lg:text-[20px] font-semibold text-[#7E5005]">
                  {item.title}
                </h3>
              </div>
            ))}
          </Slider>
        </div>
      </div>
    </div>
  );
}

export default Experience;
</file>

<file path="src/components/Home/Confidence.tsx">
"use client";
import React from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function Confidence() {
  const t = useTranslations("Confidence");
  const data = [
    {
      title: t("card1Title"),
      desc: t("card1Desc"),
      img: "/Home/confidencecards/card1.png",
      color: "bg-[#CAFF75]",
    },
    {
      title: t("card2Title"),
      desc: t("card2Desc"),
      img: "/Home/confidencecards/card2.png",
      color: "bg-[#FD97A3]",
    },
    {
      title: t("card3Title"),
      desc: t("card3Desc"),
      img: "/Home/confidencecards/card3.svg",
      color: "bg-[#FFC719]",
    },
  ];

  return (
    <>
      <div className="section-width sectionlayout overflow-hidden">
        <h2 className="text-[clamp(26px,3.5vw,64px)] text-[#F56A00] text-center font-[700] md:px-40 px-6 py-6">
          {t('title')}
        </h2>
      </div>

      {/* orange main div */}
      <div className="relative md:h-[55vh] sm:h-[95vh] bg-[#F56A00] rounded-3xl mx-4 md:mx-6 lg:mx-10 xl:mx-10 flex items-center justify-center py-12">
        {/* Low opacity stars */}
        <Image
          src="/Home/lowopacitystars.svg"
          alt="stars"
          width={58}
          height={77}
          className="absolute top-4 md:flex hidden right-2 md:top-6 md:right-12"
        />
        <Image
          src="/Home/lowopacitystars.svg"
          alt="stars"
          width={50}
          height={69}
          className="absolute md:hidden flex top-4 right-2"
        />

        {/* Inner container for stars and text */}
        <div className="relative w-[80%] h-[70%] md:w-[85%] md:h-[75%] lg:w-[80%] lg:h-[80%] flex items-center justify-center">
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={27}
            height={26}
            className="absolute hidden md:flex top-1 left-0 md:top-2 md:left-4"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={20}
            height={19}
            className="absolute md:hidden flex top-1 left-0"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={27}
            height={26}
            className="absolute md:flex hidden top-1 right-0 md:top-2 md:right-4"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={20}
            height={19}
            className="absolute flex md:hidden top-10 right-0"
          />
          <Image
            src="/Home/whitestars.svg"
            alt="stars"
            width={58}
            height={77}
            className="absolute md:flex hidden top-1/2 left-2 transform -translate-y-1/2"
          />
          <Image
            src="/Home/whitestars.svg"
            alt="stars"
            width={30}
            height={49}
            className="absolute md:hidden flex top-2/3 left-0 transform -translate-y-1/2"
          />
          <Image
            src="/Home/whitestars.svg"
            alt="stars"
            width={58}
            height={77}
            className="absolute md:flex hidden top-1/2 right-20 transform -translate-y-1/2"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={27}
            height={26}
            className="absolute hidden md:flex bottom-4 right-24"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={27}
            height={26}
            className="absolute md:hidden flex bottom-10 right-24"
          />
          <Image
            src="/Home/yellowstar.svg"
            alt="stars"
            width={27}
            height={26}
            className="absolute bottom-4 left-18"
          />

          {/* Text content */}
          <div className="w-full max-w-6xl px-4 z-10 mb-30 md:mb-0">
            <h3 className="mx-4 md:mx-8 lg:mx-16 rounded-sm text-center bg-[#FFC719] p-4 font-[800] text-[clamp(20px,2vw,34px)]">
              {t('banner1')}
            </h3>
            <h3 className="md:mt-8 md:mx-8 lg:mx-16 rounded-sm text-center text-white p-4 font-[800] text-[clamp(16px,2vw,34px)]">
              {t('banner2')}
            </h3>
          </div>
        </div>

        {/* Girl image */}
        <Image
          src="/Home/confidencegirl.png"
          alt="confident girl with tablet"
          width={191}
          height={287}
          className="absolute md:flex hidden bottom-0 right-4 md:right-8 lg:right-12"
        />
        <Image
          src="/Home/confidencegirl.png"
          alt="confident girl with tablet"
          width={131}
          height={217}
          className="absolute md:hidden flex bottom-0 right-4 md:right-8 lg:right-12"
        />
        <Image
          src="/Home/lowopacitystars.svg"
          alt="stars"
          width={58}
          height={77}
          className="absolute bottom-4 left-12"
        />
      </div>

      {/* Three Cards */}
      <div className="mt-14 md:h-[40vh]  rounded-3xl mx-4 md:mx-6 lg:mx-10 xl:mx-10 flex items-center justify-center">
        <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 justify-center items-center gap-12">
          {data.map((item, index) => (
            <div
              key={index}
              className={`${item.color} flex flex-col rounded-xl md:h-[30vh] h-[35vh] relative overflow-hidden`}
            >
              <div className="flex-shrink-0 pt-8 pl-8">
                <h3 className="text-left text-[clamp(18px,2vw,24px)] font-[600]">
                  {item.title}
                </h3>
              </div>

              <div className="flex flex-col sm:flex-row flex-1 ">
                <div className="flex flex-col pl-8 w-full sm:w-2/3 justify-start">
                  <p className="text-[clamp(16px,2vw,20px)] text-left">
                    {item.desc}
                  </p>
                </div>

                <div className="flex w-full sm:w-1/3 justify-end items-center">
                  <Image
                    src={item.img}
                    alt="illustration"
                    width={148}
                    height={222}
                    className="object-contain max-h-full mt-[6vh]"
                  />
                </div>
              </div>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default Confidence;
</file>

<file path="src/components/Home/Download.tsx">
"use client";
import Image from "next/image";
import { useTranslations } from "next-intl";

function MobileSection() {
  const t = useTranslations("GetStarted");
  return (
    <>
      <div
        className="section-width sectionlayout overflow-hidden mt-[10vh]"
        style={{
          backgroundImage: `url('/Home/downloadbg.png')`,
          backgroundSize: "100%",
          backgroundRepeat: "no-repeat",
          backgroundPosition: "center top 10px",
        }}
        data-aos="fade-up"
      >
        <div className="max-w-7xl mx-auto ">
          <h2
            className="text-[#F56A00] text-center md:mt-[50vh] mt-[15vh] font-semibold leading-14"
            style={{ fontSize: "clamp(44px, 3.2vw, 64px)" }}
            data-aos="fade-up"
            data-aos-delay="50"
          >
            {t('title')}
          </h2>

          <p
            className="text-[#3C3B3B] text-center mt-4 md:max-w-[72%] mx-auto w-full font-medium"
            style={{ fontSize: "clamp(18px, 1vw, 20px)" }}
            data-aos="fade-up"
            data-aos-delay="100"
          >
            {t('text')}
          </p>

          <div
            className="flex justify-center"
            data-aos="zoom-in"
            data-aos-delay="150"
          >
            <button className="mt-8 md:text-[20px] border cursor-pointer text-white border-[#FF5A13] hover:text-[#FF5A13] bg-[#FF5A13] hover:bg-transparent transition-all ease-in-out duration-300 py-2 px-4 rounded-full">
              {t('downloadButton')}
            </button>
          </div>
          <div className="relative" data-aos="fade-up" data-aos-delay="200">
            <div className="hidden md:block">
              <Image
                src="/About/diamond.png"
                alt="diamond"
                width={70}
                height={70}
                className="my-4 absolute left-32 top-20 hideen md:block"
                data-aos="fade-right"
                data-aos-delay="250"
              />
              <Image
                src="/About/cartoon1.png"
                alt="cartoon1"
                width={70}
                height={70}
                className="my-4 absolute right-32 top-32 hideen md:block"
                data-aos="fade-left"
                data-aos-delay="300"
              />
              <Image
                src="/About/coin.png"
                alt="coin"
                width={70}
                height={70}
                className="my-4 absolute right-32 bottom-32 hideen md:block"
                data-aos="fade-left"
                data-aos-delay="350"
              />
              <Image
                src="/About/image 16.png"
                alt="image 16"
                width={70}
                height={70}
                className="my-4 absolute left-32 bottom-32 hideen md:block"
                data-aos="fade-right"
                data-aos-delay="400"
              />
            </div>
            <div className="flex md:hidden justify-between md:w-[75%] mx-auto -mb-[30px]">
              <Image
                src="/About/diamond.png"
                alt="diamond"
                width={70}
                height={70}
                className="my-4"
                data-aos="fade-right"
                data-aos-delay="200"
              />
              <Image
                src="/About/cartoon1.png"
                alt="cartoon1"
                width={70}
                height={70}
                className="my-4 mr-4"
                data-aos="fade-left"
                data-aos-delay="250"
              />
            </div>

            <div
              className="flex justify-center  items-center z-30"
              data-aos="zoom-in"
              data-aos-delay="300"
            >
              <Image
                width={300}
                height={300}
                src="/Home/experience/Screen1.png"
                alt="Mobile App"
                className="max-h-[100vh] mt-10  object-cover "
              />
            </div>
            <div className="flex md:hidden z-50 -mt-[10px] md:-mt-[100px] justify-between md:w-[75%] mx-auto">
              <Image
                src="/About/coin.png"
                alt="coin"
                width={70}
                height={70}
                className="my-4"
                data-aos="fade-right"
                data-aos-delay="700"
              />
              <Image
                src="/About/cartoon2.png"
                alt="cartoon2"
                width={70}
                height={70}
                className="my-4 mr-4"
                data-aos="fade-left"
                data-aos-delay="350"
              />
            </div>
          </div>
        </div>
      </div>
      <div
        className="relative w-full -mt-14 md:-mt-12 -z-10"
        data-aos="fade-up"
        data-aos-delay="400"
      >
        <Image
          width={1920}
          height={1080}
          src="/About/belowbg.png"
          alt="background"
          className="w-full mt-10 max-h-[60vh] "
          style={{ objectFit: "fill" }}
        />

        <div className="absolute inset-0 flex items-center justify-center pointer-events-none">
          <div
            className="bg-[#FF6E00] px-4 py-3 mt-20 md:mt-32 "
            data-aos="zoom-in"
            data-aos-delay="450"
          >
            <h4 className="font-extrabold text-white text-[10px] lg:text-[22px] text-center">
              {t('madeWithLove')}
            </h4>
          </div>
        </div>
      </div>    
    </>
  );
}

export default MobileSection;
</file>

<file path="src/components/Home/Experience.tsx">
"use client";

import dynamic from "next/dynamic";

const Carousel = dynamic(() => import("../Home/Carousel"), {
  ssr: false,
});

export default function HomePage() {
  return (
    <div className="container mx-auto my-[18vh] overflow-hidden">
      <Carousel />
    </div>
  );
}
</file>

<file path="src/components/Home/Founder.tsx">
"use client";
import React from "react";
import { useTranslations } from "next-intl";

function Founder() {
  const t = useTranslations("FounderMessage");
  return (
    <div className="mx-auto section-width flex justify-center items-center   !mt-20 px-4 sm:px-6 md:px-8">
      <div className="text-center w-full !mb-[20vh] mx-2 ">
        <h2 className="text-[clamp(26px,5vw,64px)] text-[#F56A00] font-[700] px-6 py-2 ">
          {t('title')}
        </h2>
        <div className="bg-[#FFFFFF] shadow-[#CCA76F40] shadow-xl text-left p-6 ">
          <h3 className="bg-[#F56A00] text-[clamp(16px,2vw,24px)] p-2 px-4 w-44 rounded-xl text-white shadow-lg my-6">
            {t('greeting')}
          </h3>

          <p className="text-[clamp(16px,2vw,24px)] font-[500] mb-6 w-full">
            {t('p1')} <br /> {t('p2')} <br />{t('p3')}
          </p>

          <p className="text-[clamp(16px,2vw,24px)] font-[500] mb-6 w-full" >{t('closing')}</p>
          <p className="text-[clamp(16px,2vw,24px)] font-[500] mb-6 w-full text-[#00000066]">
            {t('founderTitle').split(',')[0]}, <span className="text-[#F56A00]">{t('founderTitle').split(',')[1]}</span>
          </p>
        </div>
      </div>
    </div>
  );
}

export default Founder;
</file>

<file path="src/components/Home/Hero.tsx">
"use client";
import React from "react";
import Image from "next/image";
import BlurText from "../Animations/BlurText";
import { useTranslations } from "next-intl";

export default function Hero() {
  const t = useTranslations("Hero");

  const handleAnimationComplete = () => {
    // console.log("All letters have animated!");
  };

  return (
    <section className="relative flex flex-col items-center justify-center md:min-h-[60vh] py-8 md:py-1 section-width mx-auto text-center md:!mb-10">
      <div className="w-full flex justify-center">
        <BlurText
          text={t('title')}
          delay={100}
          animateBy="words"
          direction="top"
          onAnimationComplete={handleAnimationComplete}
          className="text-[#F56A00] text-[clamp(20px,3.5vw,42px)] px-6 mt-large font-bold leading-tight z-10 relative max-w-7xl mx-auto text-center flex justify-center items-center"
        />
      </div>
      <div className="w-full flex justify-center">
        <BlurText
          text={t('subtitle')}
          delay={100}
          animateBy="words"
          direction="top"
          onAnimationComplete={handleAnimationComplete}
          className="text-black text-[clamp(14px,2vw,22px)] px-6 mt-4 md:mt-2 font-normal leading-tight z-10 relative max-w-7xl mx-auto text-center flex justify-center items-center"
        />
      </div>
      <div className="flex flex-row gap-6 mt-4 z-30">
        <button
          className="bg-[#F56A00] hover:bg-[#FF8C00] transition-colors duration-300 cursor-pointer text-[clamp(16px,2vw,24px)] p-2 px-4 rounded-full z-10 text-white text-center "
          data-aos="fade-down"
        >
          {t('downloadButton')}
        </button>
        <button
          className="text-[#F56A00] border-2 border-[#F56A00] hover:bg-[#F56A00] hover:text-white transition-colors duration-300 cursor-pointer rounded-full text-[clamp(16px,2vw,24px)] p-2 z-10  text-center "
          data-aos="fade-down"
        >
          {t('coursesButton')}
        </button>
      </div>

      <div
        className="relative w-full h-[200px] md:h-[220px] lg:h-[700px] img md:mt-[-10vh] z-0"
        data-aos="fade-down"
      >
        <Image
          src="/Home/noorlingo_new_heor_section.png"
          alt="Hero Illustration"
          fill
          style={{ objectFit: "contain" }}
          className="hero-img pointer-events-none select-none"
          priority
          sizes="(max-width: 768px) 100vw,
                 (max-width: 1200px) 80vw,
                 7l0vw"
        />
      </div>
    </section>
  );
}
</file>

<file path="src/components/Home/Screentime.tsx">
"use client";
import React from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function Screentime() {
  const t = useTranslations("ScreentimeSection");
  const data = [
    {
      title: t("card1Title"),
      desc: t("card1Desc"),
      img: "/Home/child1.png",
      color:"bg-[#FFB87F]",
    },
    {
      title: t("card2Title"),
      desc: t("card2Desc"),
      img: "/Home/child2.png",
      color: "bg-[#FFE9AE]",
    },
    {
      title: t("card3Title"),
      desc: t("card3Desc"),
      img: "/Home/child3.png",
      color: "bg-[#FFE66A]",
    },
    {
      title: t("card4Title"),
      desc: t("card4Desc"),
      img: "/Home/child4.png",
      color: "bg-[#D7FF96]",
    },
  ];

  return (
    <>
      <div className="section-width mx-auto !mb-6">
        <h2 className="text-[clamp(26px,3.5vw,64px)] text-[#F56A00] text-center font-[700] md:px-40 px-6 py-6">
          {t('title')}
        </h2>
      </div>
      <div className="min-h-[90vh] bg-[#FCFFDF] flex items-center justify-center py-12">
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-12 items-center justify-center px-6 max-w-6xl">
          {data.map((item, index) => (
            <div key={index} className={`flex flex-col items-center justify-center text-center md:h-[472px] md:w-[483px] p-6 rounded-lg ${item.color}`}>
              <Image
                src={item.img}
                alt={item.title}
                width={217}
                height={252}
                className=" object-cover  mx-auto mb-4"
              />
              <h3 className="text-xl font-semibold mb-2 text-[clamp(16px,2vw,24px)]">
                {item.title}
              </h3>
              <p className="text-gray-700 leading-relaxed text-[clamp(16px,2vw,18px)]">
                {item.desc}
              </p>
            </div>
          ))}
        </div>
      </div>
    </>
  );
}

export default Screentime;
</file>

<file path="src/components/Home/Whoweare.tsx">
"use client";
import React from "react";
import Image from "next/image";
import { useTranslations } from "next-intl";

function Whoweare() {
  const t = useTranslations("Whoweare");

  return (
    <section className="section-width mx-auto md:py-12">
      <div className="container mx-auto px-4 md:px-16">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-12 md:gap-20">
          {/* Who we are */}
          <div className="flex flex-col justify-center items-center">
            <div className="w-full text-center">
              <div className="flex flex-col items-center mb-4 md:mb-8">
                <Image
                  src="/Home/whoweare.png"
                  alt="Who We Are"
                  width={204}
                  height={183}
                  priority
                />
                <h2 className="text-[#F56A00] text-[clamp(22px,2vw,32px)] font-semibold py-4">
                  {t('title1')}
                </h2>
              </div>
              <p className="text-[clamp(16px,2vw,24px)] font-semibold mb-4 md:text-left" data-aos="fade-down">
                {t('p1_1')}
              </p>
              <p className="text-[clamp(14px,2vw,20px)] font-normal mb-4  md:text-left" data-aos="fade-down">
                {t('p1_2')}
              </p>
              <p className="text-[clamp(14px,2vw,20px)] font-normal mb-4 md:text-left" data-aos="fade-down">
                {t('p1_3')}
              </p>
            </div>
          </div>

          {/* Why we do it */}
          <div className="flex flex-col justify-center items-center">
            <div className="w-full text-center">
              <div className="flex flex-col items-center mb-4" data-aos="fade-down">
                <Image
                  src="/Home/whywedoit.png"
                  alt="Why We Do It"
                  width={185}
                  height={170}
                  priority
                />
                <h2 className="text-[#F56A00] text-[clamp(22px,2vw,32px)] font-semibold py-4">
                  {t('title2')}
                </h2>
              </div>
              <p className="text-[clamp(16px,2vw,24px)] font-semibold mb-4  md:text-left" data-aos="fade-down">
                {t('p2_1')}
              </p>
              <p className="text-[clamp(14px,2vw,20px)] font-normal mb-4 md:text-left" data-aos="fade-down">
                {t('p2_2')}
              </p>
              <p className="text-[clamp(14px,2vw,20px)] font-normal md:text-left" data-aos="fade-down">
                {t('p2_3')}
              </p>
            </div>
          </div>
        </div>
      </div>
    </section>
  );
}

export default Whoweare;
</file>

<file path="src/components/Navbar/LanguageSwitcher.tsx">
'use client';

import { useLocale } from 'next-intl';
import { useRouter, usePathname } from 'next/navigation';
import Image from 'next/image';
import { useState, useRef, useEffect } from 'react';

export default function LanguageSwitcher() {
  const router = useRouter();
  const pathname = usePathname();
  const locale = useLocale();
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent): void => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
      setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  interface LocaleCode {
    code: 'en' | 'ar';
  }

  const switchLocale = (newLocale: LocaleCode['code']): void => {
    // Remove the current locale from pathname and add the new one
    const segments: string[] = pathname.split('/');
    if (segments[1] === 'ar' || segments[1] === 'en') {
      segments[1] = newLocale;
    } else {
      segments.splice(1, 0, newLocale);
    }
    const newPath: string = segments.join('/');
    router.replace(newPath);
    setIsOpen(false);
  };

  const languages: { code: LocaleCode['code']; label: string; flag: string }[] = [
    { code: 'en', label: 'English', flag: 'US' },
    { code: 'ar', label: 'العربية', flag: 'UAE' }
  ];

  const currentLanguage = languages.find(lang => lang.code === locale);
  const otherLanguages = languages.filter(lang => lang.code !== locale);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Select language"
        className="flex items-center gap-2 p-2 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Image
          src="/world.svg"
          alt="Language Icon"
          width={44}
          height={44}
          className="cursor-pointer"
        />
        <span className="text-sm font-medium text-[#7E5005]">
          {currentLanguage?.flag}
        </span>
        <svg
          className={`w-4 h-4 text-[#7E5005] transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div className="absolute top-full right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          <div className="px-3 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100">
            Select Language
          </div>
          {otherLanguages.map((language) => (
            <button
              key={language.code}
              onClick={() => switchLocale(language.code)}
              className="w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center gap-3 transition-colors"
            >
              <span className="text-lg">{language.flag}</span>
              <span className="text-sm font-medium text-gray-700">{language.label}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/Navbar/LanguageSwitcherMobile.tsx">
'use client';

import { useLocale } from 'next-intl';
import { useRouter, usePathname } from 'next/navigation';
import Image from 'next/image';
import { useState, useRef, useEffect } from 'react';

export default function LanguageSwitcherMobile() {
  const router = useRouter();
  const pathname = usePathname();
  const locale = useLocale();
  const [isOpen, setIsOpen] = useState(false);
  const dropdownRef = useRef<HTMLDivElement | null>(null);

  // Close dropdown when clicking outside
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent): void => {
      if (dropdownRef.current && !dropdownRef.current.contains(event.target as Node)) {
      setIsOpen(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  interface Language {
    code: 'en' | 'ar';
    label: string;
    flag: string;
  }

  const switchLocale = (newLocale: Language['code']): void => {
    // Remove the current locale from pathname and add the new one
    const segments: string[] = pathname.split('/');
    if (segments[1] === 'ar' || segments[1] === 'en') {
      segments[1] = newLocale;
    } else {
      segments.splice(1, 0, newLocale);
    }
    const newPath: string = segments.join('/');
    router.replace(newPath);
    setIsOpen(false);
  };

  const languages: Language[] = [
    { code: 'en', label: 'English', flag: 'US' },
    { code: 'ar', label: 'العربية', flag: 'UAE' }
  ];

  const currentLanguage = languages.find(lang => lang.code === locale);
  const otherLanguages = languages.filter(lang => lang.code !== locale);

  return (
    <div className="relative" ref={dropdownRef}>
      <button
        onClick={() => setIsOpen(!isOpen)}
        aria-label="Select language"
        className="flex items-center gap-1 p-1 rounded-lg hover:bg-gray-100 transition-colors"
      >
        <Image
          src="/world.svg"
          alt="Language Icon"
          width={34}
          height={34}
          className="cursor-pointer"
        />
        <span className="text-sm">{currentLanguage?.flag}</span>
        <svg
          className={`w-3 h-3 text-[#7E5005] transition-transform ${isOpen ? 'rotate-180' : ''}`}
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 9l-7 7-7-7" />
        </svg>
      </button>

      {isOpen && (
        <div className="absolute top-full right-0 mt-2 w-40 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          <div className="px-3 py-2 text-xs font-medium text-gray-500 uppercase tracking-wider border-b border-gray-100">
            Language
          </div>
          {otherLanguages.map((language) => (
            <button
              key={language.code}
              onClick={() => switchLocale(language.code)}
              className="w-full px-3 py-2 text-left hover:bg-gray-50 flex items-center gap-2 transition-colors"
            >
              <span className="text-base">{language.flag}</span>
              <span className="text-sm font-medium text-gray-700">{language.label}</span>
            </button>
          ))}
        </div>
      )}
    </div>
  );
}
</file>

<file path="src/components/Navbar/Navbar.tsx">
"use client";

import clsx from "clsx";
import React, { useState } from "react";
import Image from "next/image";
import { usePathname } from "next/navigation";
import Link from 'next/link';
import { AnimatePresence, motion } from "framer-motion";
import { useTranslations } from "next-intl";
import LanguageSwitcher from './LanguageSwitcher'; 
import LanguageSwitcherMobile from './LanguageSwitcherMobile';

function Navbar() {
  const t = useTranslations("Navbar");
  const pathname = usePathname();
  const [menuOpen, setMenuOpen] = useState(false);

  const navLinks = [
    { href: "/", label: t("home") },
    { href: "/about", label: t("about") },
    { href: "/contact", label: t("contact") },
  ];

  return (
    <>
      {/* Desktop navbar */}
      <div className="z-50 hidden md:flex flex-row justify-between items-center gap-6 p-4 section-width mx-auto mt">
        <Link href="/">
          <Image
            src="/Logo.webp"
            alt="Logo"
            width={185}
            height={39}
            className="cursor-pointer"
            priority
          />
        </Link>

        <div className="flex flex-row items-center gap-6 bg-[#F56A002E] p-4 px-8 rounded-full">
          {navLinks.map((link) => {
            const isActive = pathname === link.href;
            return (
              <Link
                key={link.href}
                href={link.href}
                className={clsx(
                  "text-[#7E5005] font-[600] text-[clamp(15px,2vw,18px)] hover:text-[#FF8C00] px-6 p-1 rounded-full transition",
                  isActive && "bg-[#FFD962]"
                )}
              >
                {link.label}
              </Link>
            );
          })}
        </div>

        <div className="flex flex-row items-center gap-4">
            <Image
                src="/search.svg"
                alt="Search Icon"
                width={44}
                height={44}
                className="cursor-pointer"
            />
            <LanguageSwitcher /> 
            <button className="bg-[#F56A00] text-[clamp(15px,2vw,18px)] text-white p-2 px-6 rounded-3xl hover:bg-[#FF8C00] transition-colors duration-300">
                {t('getStarted')}
            </button>
        </div>
      </div>

      {/* Mobile navbar */}
      <div className="flex md:hidden flex-row justify-between items-center gap-6 p-4 section-width mx-auto mt-4">
        <Link href="/">
          <Image
            src="/Logo.webp"
            alt="Logo"
            width={130}
            height={25}
            className="cursor-pointer"
            priority
          />
        </Link>

        <div className="z-50 flex flex-row items-center gap-4">
          <Image
            src="/search.svg"
            alt="Search Icon"
            width={34}
            height={34}
            className="cursor-pointer"
          />
          <LanguageSwitcherMobile />

          {/* Mobile hamburger */}
          <button aria-label="Open menu" onClick={() => setMenuOpen(true)}>
            <svg
              xmlns="http://www.w3.org/2000/svg"
              width="34"
              height="34"
              fill="none"
              viewBox="0 0 24 24"
              className="text-[#7E5005]"
            >
              <rect x="4" y="6" width="16" height="2" rx="1" fill="currentColor"/>
              <rect x="4" y="11" width="16" height="2" rx="1" fill="currentColor"/>
              <rect x="4" y="16" width="16" height="2" rx="1" fill="currentColor"/>
            </svg>
          </button>
        </div>
      </div>

      {/* Mobile dropdown menu */}
      <AnimatePresence>
        {menuOpen && (
          <motion.div
            initial={{ opacity: 0, y: 8 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 2 }}
            transition={{ duration: 0.18, ease: "easeInOut" }}
            className="fixed inset-0 z-[100] bg-white/90 backdrop-blur flex flex-col items-end p-4 md:hidden"
          >
            <div className="w-full flex flex-col items-center gap-8 bg-[#F56A002E] rounded-3xl px-4 h-[100vh]">
              <div className="w-full flex justify-end">
                <button
                  aria-label="Close menu"
                  onClick={() => setMenuOpen(false)}
                  className="transition-opacity duration-300 ease-in-out"
                >
                  <svg
                    xmlns="http://www.w3.org/2000/svg"
                    width="32"
                    height="32"
                    viewBox="0 0 24 24"
                    fill="none"
                    className="text-[#F56A00] mt-4"
                  >
                    <line x1="18" y1="6" x2="6" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                    <line x1="6" y1="6" x2="18" y2="18" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
                  </svg>
                </button>
              </div>
              <Link href="/">
                <Image
                  src="/Logo.webp"
                  alt="Logo"
                  width={185}
                  height={39}
                  className="cursor-pointer"
                  priority
                />
              </Link>
              <div className="flex flex-col justify-center items-center gap-6 mt-[14vh] w-full">
                {navLinks.map((link) => {
                  const isActive = pathname === link.href;
                  return (
                    <Link
                      key={link.href}
                      href={link.href}
                      className={clsx(
                        "text-center text-[#7E5005] font-[600] text-lg hover:text-[#FF8C00] px-8 py-3 rounded-full transition ",
                        isActive && "bg-[#FFD962]"
                      )}
                      onClick={() => setMenuOpen(false)}
                    >
                      {link.label}
                    </Link>
                  );
                })}
                <button className="bg-[#F56A00] mb-6 w-full text-lg text-white py-3 rounded-3xl hover:bg-[#FF8C00] transition-colors duration-300">
                  {t('getStarted')}
                </button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  );
}

export default Navbar;
</file>

<file path="src/components/text.txt">
test
</file>

<file path="src/types/aos.d.ts">
declare module 'aos';
</file>

<file path="src/types/react-slick.d.ts">
// src/types/react-slick.d.ts
declare module 'react-slick' {
  import * as React from 'react';

  interface Settings {
    infinite?: boolean;
    draggable?: boolean;
    arrows?: boolean;
    autoplay?: boolean;
    dots?: boolean;
    speed?: number;
    slidesToShow?: number;
    slidesToScroll?: number;
    [key: string]: unknown;
  }

  export default class Slider extends React.Component<Settings> {}
}
</file>

<file path="src/types/tailwindcss-dir.d.ts">
declare module 'tailwindcss-dir' {
  const plugin: () => import('postcss').Plugin;
  export default plugin;
}
</file>

<file path="next.config.ts">
import createNextIntlPlugin from 'next-intl/plugin';
import type { NextConfig } from 'next';

// Correct path pointing to the i18n request configuration
const withNextIntl = createNextIntlPlugin('./i18n.ts');

const nextConfig: NextConfig = {
  images: {
    unoptimized: true,
  },
};

export default withNextIntl(nextConfig);
</file>

<file path="package.json">
{
  "name": "d18-noorlingo",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "export": "next export",
    "lint": "next lint"
  },
  "dependencies": {
    "aos": "^2.3.4",
    "clsx": "^2.1.1",
    "framer-motion": "^12.17.0",
    "gsap": "^3.13.0",
    "next": "15.3.3",
    "next-intl": "^4.3.4",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "react-slick": "^0.30.3",
    "slick-carousel": "^1.8.1",
    "tailwindcss-dir": "^4.0.0"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.3.3",
    "tailwindcss": "^4.1.11",
    "typescript": "^5"
  }
}
</file>

<file path="src/middleware.ts">
import createMiddleware from 'next-intl/middleware';
import intlConfig from '../next-intl.config.js';

// Use the config object directly
export default createMiddleware({
  locales: intlConfig.locales,
  defaultLocale: intlConfig.defaultLocale,
});

export const config = {
  // Match only internationalized pathnames
  matcher: ['/', '/(ar|en)/:path*']
};
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts", "next-intl.config.js"],
  "exclude": ["node_modules"]
}
</file>

</files>
